paths:
  /v1/{prefix}/namespaces/{namespace}/policies:
    parameters:
      - $ref: '#/components/parameters/prefix'
      - $ref: '#/components/parameters/namespace'

    post:
      tags:
        - Catalog API
      summary: 'Create a policy in the given namespace'
      operationId: createPolicy
      description:
        Create a policy in the given namespace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePolicyRequest'
      responses:
        200:
          $ref: '#/components/responses/CreatePolicyResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        419:
          $ref: '#/components/responses/AuthenticationTimeoutResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/{prefix}/namespaces/{namespace}/policies/{policy}:
    parameters:
      - $ref: '#/components/parameters/prefix'
      - $ref: '#/components/parameters/namespace'
      - $ref: '#/components/parameters/policy'

    get:
      tags:
        - Catalog API
      summary: 'Get a policy'
      operationId: getPolicy
      description:
        Get a policy from the catalog
        
        
        The response contains the policy's metadata and content
      responses:
        200:
          $ref: '#/components/responses/LoadPolicyResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          description:
            Not Found - NoSuchPolicyException, policy to get does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
              examples:
                PolicyToGetDoesNotExist:
                  $ref: '#/components/examples/NoSuchPolicyError'
        419:
          $ref: '#/components/responses/AuthenticationTimeoutResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

    put:
      tags:
        - Catalog API
      summary: Update a policy
      operationId: updatePolicy
      description:
        Update a policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePolicyRequest'
      
      responses:
        200:
          $ref: '#/components/responses/UpdatePolicyResponse'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          description:
            Not Found - NoSuchPolicyException, policy to get does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
              examples:
                PolicyToUpdateDoesNotExist:
                  $ref: '#/components/examples/NoSuchPolicyError'
        419:
          $ref: '#/components/responses/AuthenticationTimeoutResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

    delete:
      tags:
        - Catalog API
      summary: Delete a policy from the catalog
      operationId: deletePolicy
      description: Remove a policy from the catalog
      responses:
        204:
          description: Success, no content
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          description:
            Not Found - NoSuchPolicyException, policy to get does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
              examples:
                PolicyToDeleteDoesNotExist:
                  $ref: '#/components/examples/NoSuchPolicyError'
        419:
          $ref: '#/components/responses/AuthenticationTimeoutResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

  /v1/{prefix}/namespaces/{namespace}/policies/{policy}/mappings:
    parameters:
      - $ref: '#/components/parameters/prefix'
      - $ref: '#/components/parameters/namespace' 
      - $ref: '#/components/parameters/policy'

    post:
      tags:
        - Catalog API
      summary: Create a mapping between a policy and a resource entity
      operationId: setPolicy
      description: 
        Create a mapping between a policy and a resource entity

        A resource entity can be a catalog, namespace, or any table-like entity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPolicyRequest'

      responses:
        204:
          description: Success, no content
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          description:
            Not Found - NoSuchPolicyException, NoSuchEntityException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
              examples:
                PolicyToSetDoesNotExist:
                  $ref: '#/components/examples/NoSuchPolicyError'
                EntityToSetDoesNotExist:
                  $ref: '#/components/examples/NoSuchEntityError'
        409:
          description: Conflict - The mapping already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
              examples:
                MappingAlreadyExistsError:
                  $ref: '#/components/examples/MappingAlreadyExistsError'
        419:
          $ref: '#/components/responses/AuthenticationTimeoutResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'

    delete:
      tags: 
        - Catalog API
      summary: Remove a mapping between a policy and a resource entity
      operationId: unsetPolicy
      description: 
        Remove a mapping between a policy and a resource entity

        A resource entity can be a catalog, namespace, or any table-like entity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnsetPolicyRequest'

      responses:
        204:
          description: Success, no content
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedResponse'
        403:
          $ref: '#/components/responses/ForbiddenResponse'
        404:
          description:
            Not Found - NoSuchPolicyException, NoSuchEntityException, NoSuchMappingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergErrorResponse'
              examples:
                PolicyToUnsetDoesNotExist:
                  $ref: '#/components/examples/NoSuchPolicyError'
                EntityToUnsetDoesNotExist:
                  $ref: '#/components/examples/NoSuchEntityError'
                MappingToUnsetDoesNotExist:
                  $ref: '#/components/examples/NoSuchMappingError'
        419:
          $ref: '#/components/responses/AuthenticationTimeoutResponse'
        503:
          $ref: '#/components/responses/ServiceUnavailableResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'


components:
  parameters:
    namespace:
      $ref: '../rest-catalog-open-api.yaml#/components/parameters/namespace'

    prefix:
      $ref: '../rest-catalog-open-api.yaml#/components/parameters/prefix'

    policy:
      name: policy
      in: path
      description: a policy name
      required: true
      schema:
        type: string
      example: 'compaction'

  schemas:
    Namespace:
      $ref: '../rest-catalog-open-api.yaml#/components/schemas/Namespace'

    IcebergErrorResponse:
      $ref: '../rest-catalog-open-api.yaml#/components/schemas/IcebergErrorResponse'

    Policy:
      type: object
      required:
        - owner_id
        - policy-id
        - policy-type
        - name
        - content
        - version
      properties:
        owner-id:
          type: string
        policy-id:
          type: string
        policy-type:
          type: string
        name:
          type: string
        description: 
          type: string
        content:
          $ref: '#/components/schemas/PolicyContent'
        version:
          type: integer
        created-at-ms:
          type: integer
          format: int64
        updated-at-ms: 
          type: integer
          format: int64

    PolicyContent: {}

    CreatePolicyRequest:
      type: object
      required:
        - name
        - type
        - content
      properties:
        name: 
          type: string
        type:
          type: string
        description:
          type: string
        content:
          $ref: '#/components/schemas/PolicyContent'

    LoadPolicyResult:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/Policy'

    UpdatePolicyRequest:
      type: object
      properties:
        description:
          type: string
        content:
          $ref: '#/components/schemas/PolicyContent'

    SetPolicyRequest:
      type: object
      required:
        - entity
      properties:
        entity:
          $ref: '#/components/schemas/EntityIdentifier'
        parameters:
          type: object
          additionalProperties:
            type: string

    UnsetPolicyRequest:
      type: object
      required:
        - entity
      properties:
        entity:
          $ref: '#/components/schemas/EntityIdentifier'

    CatalogIdentifier:
      allOf:
        - $ref: '#/components/schemas/EntityIdentifier'
        - type: object
          required:
            - catalog
          properties:
            catalog:
              type: string
    
    NamespaceIdentifier:
      allOf:
        - $ref: '#/components/schemas/EntityIdentifier'
        - type: object
          required:
              - catalog
              - namespace
          properties:
            catalog:
              type: string
              nullable: false
            namespace:
              $ref: '#/components/schemas/Namespace'

    TableLikeIdentifier:
      allOf:
        - $ref: '#/components/schemas/EntityIdentifier'
        - type: object
          required:
            - catalog
            - namespace
            - name
          properties:
            catalog:
              type: string
              nullable: false
            namespace:
              $ref: '#/components/schemas/Namespace'
            name:
              type: string
              nullable: false

    EntityIdentifier:
      type: object
      discriminator:
        propertyName: type
        mapping:
          catalog: '#/components/schemas/CatalogIdentifier'
          namespace: '#/components/schemas/NamespaceIdentifier'
          table-like: '#/components/schemas/TableLikeIdentifier'
      properties:
        type:
          type: string
          enum:
            - catalog
            - namespace
            - table-like
      required:
        - type

  responses:
    BadRequestErrorResponse:
      $ref: '../rest-catalog-open-api.yaml#/components/responses/BadRequestErrorResponse'

    UnauthorizedResponse:
      $ref: '../rest-catalog-open-api.yaml#/components/responses/UnauthorizedResponse'

    ForbiddenResponse:
      $ref: '../rest-catalog-open-api.yaml#/components/responses/ForbiddenResponse'

    AuthenticationTimeoutResponse:
      $ref: '../rest-catalog-open-api.yaml#/components/responses/AuthenticationTimeoutResponse'

    ServiceUnavailableResponse:
      $ref: '../rest-catalog-open-api.yaml#/components/responses/ServiceUnavailableResponse'

    ServerErrorResponse:
      $ref: '../rest-catalog-open-api.yaml#/components/responses/ServerErrorResponse'

    IcebergErrorResponse:
      $ref: '../rest-catalog-open-api.yaml#/components/responses/IcebergErrorResponse'

    CreatePolicyResponse:
      description: Policy object result after creating a policy
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoadPolicyResult'

    LoadPolicyResponse:
      description: Policy object result when getting a policy
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoadPolicyResult'

    UpdatePolicyResponse:
      description:
        Response used when a policy is successfully updated

        The updated policy JSON is returned in the policy field
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoadPolicyResult'

  examples:
    NoSuchPolicyError:
      summary: The requested policy does not exist
      value: {
        "error": {
          "message": "The given policy does not exist",
          "type": "NoSuchPolicyException",
          "code": 404
        }
      }

    NoSuchEntityError:
      summary: The requested entity does not exist
      value: {
        "error": {
          "message": "The given entity does not exist",
          "type": "NoSuchEntityException",
          "code": 404
        }
      }

    NoSuchMappingError:
      summary: The requested mapping between policy and entity does not exist
      value: {
        "error": {
          "message": "The given mapping between policy and entity does not exist",
          "type": "NoSuchMappingException",
          "code": 404
        }
      }

    MappingAlreadyExistsError:
      summary: The mapping between the given policy and entity already exists
      value: {
        "error": {
          "message": "The mapping between the given policy and entity does not exist",
          "type": "MappingAlreadyExistsError",
          "code": 409
        }
      }
