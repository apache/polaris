#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: Release - 4 - Build Docker Images

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (check to enable, uncheck to perform actual operations)'
        required: false
        type: boolean
        default: true
  workflow_run:
    workflows: ["Build and Publish Release Artifacts"]
    types:
      - completed

jobs:
  build-docker:
    name: Release - 4 - Build Docker Images
    runs-on: ubuntu-latest
    # Only run if manually triggered or if the "Build and Publish Release Artifacts" workflow succeeded
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    permissions:
      contents: read
    outputs:
      dry_run: ${{ steps.set-outputs.outputs.dry_run }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Set DRY_RUN environment variable
        id: set-outputs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger - use input parameter
            if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
              echo "DRY_RUN=1" >> $GITHUB_ENV
              echo "dry_run=1" >> $GITHUB_OUTPUT
              echo "DRY_RUN mode enabled - no actual changes will be made"
            else
              echo "DRY_RUN=0" >> $GITHUB_ENV
              echo "dry_run=0" >> $GITHUB_OUTPUT
              echo "DRY_RUN mode disabled - actual changes will be made"
            fi
          else
            # Automatic trigger - get upstream workflow's dry_run value
            workflow_run_id="${{ github.event.workflow_run.id }}"

            # Fetch the jobs for the workflow run
            jobs_response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${workflow_run_id}/jobs")

            # Extract the dry_run output from the build-and-publish-artifacts job
            upstream_dry_run=$(echo "$jobs_response" | jq -r '.jobs[] | select(.name == "Build and Publish Artifacts") | .outputs.dry_run // "0"')

            echo "DRY_RUN=${upstream_dry_run}" >> $GITHUB_ENV
            echo "dry_run=${upstream_dry_run}" >> $GITHUB_OUTPUT
            echo "Retrieved upstream dry_run value: ${upstream_dry_run}"
          fi

      - name: Validate release candidate tag
        run: |
          releasey_dir="$(pwd)/releasey"
          LIBS_DIR="${releasey_dir}/libs"

          source "${LIBS_DIR}/_log.sh"
          source "${LIBS_DIR}/_constants.sh"
          source "${LIBS_DIR}/_version.sh"

          print_info "Determining version from current git tag..."

          if ! git_tag=$(git describe --tags --exact-match HEAD 2>/dev/null); then
            print_error "Current HEAD is not on a release candidate tag. Please checkout a release candidate tag first."
            exit 1
          fi
          print_info "Found git tag: ${git_tag}"

          # Validate git tag format and extract version components
          if ! validate_and_extract_git_tag_version "${git_tag}"; then
            print_error "Invalid git tag format: ${git_tag}"
            print_error "Expected format: apache-polaris-x.y.z-incubating-rcN"
            exit 1
          fi

          print_info "Validated release candidate tag: ${git_tag}"
          print_info "Version: ${version_without_rc}"
          print_info "RC number: ${rc_number}"

          # Export variables for next steps
          echo "git_tag=${git_tag}" >> $GITHUB_ENV
          echo "version_without_rc=${version_without_rc}" >> $GITHUB_ENV
          echo "rc_number=${rc_number}" >> $GITHUB_ENV

      - name: Set up Java
        uses: actions/setup-java@8df1039502a15bceb9433410b1a100fbe190c53b # v4
        with:
          distribution: 'temurin'
          java-version: '21'



      - name: Build Polaris Server Docker image
        run: |
          releasey_dir="$(pwd)/releasey"
          LIBS_DIR="${releasey_dir}/libs"

          source "${LIBS_DIR}/_log.sh"
          source "${LIBS_DIR}/_exec.sh"

          print_info "Building Polaris Server Docker image..."
          exec_process ./gradlew :polaris-server:assemble :polaris-server:quarkusAppPartsBuild --rerun \
            -Dquarkus.container-image.build=true \
            -Dquarkus.container-image.push=false \
            -Dquarkus.docker.buildx.platform="linux/amd64,linux/arm64" \
            -Dquarkus.container-image.tag="${git_tag}"

          print_success "Polaris Server Docker image built successfully"

      - name: Build Polaris Admin Tool Docker image
        run: |
          releasey_dir="$(pwd)/releasey"
          LIBS_DIR="${releasey_dir}/libs"

          source "${LIBS_DIR}/_log.sh"
          source "${LIBS_DIR}/_exec.sh"

          print_info "Building Polaris Admin Tool Docker image..."
          exec_process ./gradlew :polaris-admin:assemble :polaris-admin:quarkusAppPartsBuild --rerun \
            -Dquarkus.container-image.build=true \
            -Dquarkus.container-image.push=false \
            -Dquarkus.docker.buildx.platform="linux/amd64,linux/arm64" \
            -Dquarkus.container-image.tag="${git_tag}"

          print_success "Polaris Admin Tool Docker image built successfully"
