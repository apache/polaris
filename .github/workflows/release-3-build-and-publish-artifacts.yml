#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: Release - 3 - Build and Publish Release Artifacts

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (check to enable, uncheck to perform actual operations)'
        required: false
        type: boolean
        default: true

jobs:
  build-and-publish-artifacts:
    name: Release - 3 - Build and Publish Release Artifacts
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      dry_run: ${{ steps.set-outputs.outputs.dry_run }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0

      - name: Set up environment variables
        id: set-outputs
        run: |
          echo "RELEASEY_DIR=$(pwd)/releasey" >> $GITHUB_ENV
          echo "LIBS_DIR=$(pwd)/releasey/libs" >> $GITHUB_ENV

          echo "## Mode" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "DRY_RUN=1" >> $GITHUB_ENV
            echo "dry_run=1" >> $GITHUB_OUTPUT
            echo "‼️ DRY_RUN mode enabled - No actual changes will be made" >> $GITHUB_STEP_SUMMARY
          else
            echo "DRY_RUN=0" >> $GITHUB_ENV
            echo "dry_run=0" >> $GITHUB_OUTPUT
            echo "DRY_RUN mode disabled - Performing actual operations" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Validate release candidate tag
        run: |
          source "${LIBS_DIR}/_version.sh"

          echo "## Parameters" >> $GITHUB_STEP_SUMMARY

          if ! git_tag=$(git describe --tags --exact-match HEAD 2>/dev/null); then
            echo "❌ Current HEAD is not on a release candidate tag. Please checkout a release candidate tag first." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Validate git tag format and extract version components
          if ! validate_and_extract_git_tag_version "${git_tag}"; then
            echo "❌ Invalid git tag format: \`${git_tag}\`. Expected format: apache-polaris-x.y.z-incubating-rcN." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Export variables for next steps
          echo "git_tag=${git_tag}" >> $GITHUB_ENV
          echo "version_without_rc=${version_without_rc}" >> $GITHUB_ENV
          echo "rc_number=${rc_number}" >> $GITHUB_ENV

          cat <<EOT >> $GITHUB_STEP_SUMMARY
          | Parameter | Value |
          | --- | --- |
          | Git tag | \`${git_tag}\` |
          | Version | \`${version_without_rc}\` |
          | RC number | \`${rc_number}\` |
          EOT

      - name: Set up Java
        uses: actions/setup-java@8df1039502a15bceb9433410b1a100fbe190c53b # v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Test and configure GPG key
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "use-agent" >> ~/.gnupg/gpg.conf
          gpg-connect-agent reloadagent /bye

          # Test that GPG can sign (this will cache the passphrase)
          echo "test" | gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --pinentry-mode loopback --armor --detach-sign

          mkdir -p ~/.gradle
          echo "signing.gnupg.keyName=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -1 | sed 's/.*\/\([A-F0-9]*\).*/\1/')" >> ~/.gradle/gradle.properties

      - name: Build source and binary distributions
        run: |
          source "${LIBS_DIR}/_exec.sh"

          exec_process ./gradlew build sourceTarball -Prelease -PuseGpgAgent -x test -x intTest

          cat <<EOT >> $GITHUB_STEP_SUMMARY
          ## Build
          Source and binary distributions built successfully
          EOT

      - name: Stage artifacts to Apache dist dev repository
        env:
          SVN_USERNAME: ${{ secrets.APACHE_USERNAME }}
          SVN_PASSWORD: ${{ secrets.APACHE_PASSWORD }}
        run: |
          source "${LIBS_DIR}/_constants.sh"
          source "${LIBS_DIR}/_exec.sh"

          dist_dev_dir=${RELEASEY_DIR}/polaris-dist-dev
          exec_process svn checkout --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive "${APACHE_DIST_URL}${APACHE_DIST_PATH}" "${dist_dev_dir}"

          version_dir="${dist_dev_dir}/${version_without_rc}"
          exec_process mkdir -p "${version_dir}"
          exec_process cp build/distributions/* "${version_dir}/"
          exec_process cp runtime/distribution/build/distributions/* "${version_dir}/"

          exec_process cd "${dist_dev_dir}"
          exec_process svn add "${version_without_rc}"

          exec_process svn commit --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --non-interactive -m "Stage Apache Polaris ${version_without_rc} RC${rc_number}"

          cat <<EOT >> $GITHUB_STEP_SUMMARY
          ## Staging to dist dev
          Artifacts staged to Apache dist dev repository
          EOT

      - name: Publish artifacts to Apache Nexus staging repository
        env:
          ORG_GRADLE_PROJECT_apacheUsername: ${{ secrets.APACHE_USERNAME }}
          ORG_GRADLE_PROJECT_apachePassword: ${{ secrets.APACHE_PASSWORD }}
        run: |
          source "${LIBS_DIR}/_exec.sh"

          exec_process ./gradlew publishToApache -Prelease -PuseGpgAgent

          cat <<EOT >> $GITHUB_STEP_SUMMARY
          ## Staging to Nexus
          Artifacts published to Apache Nexus staging repository
          EOT

      - name: Close Nexus staging repository
        env:
          ORG_GRADLE_PROJECT_apacheUsername: ${{ secrets.APACHE_USERNAME }}
          ORG_GRADLE_PROJECT_apachePassword: ${{ secrets.APACHE_PASSWORD }}
        run: |
          source "${LIBS_DIR}/_exec.sh"

          exec_process ./gradlew closeApacheStagingRepository

          cat <<EOT >> $GITHUB_STEP_SUMMARY
          ## Summary
          🎉 Artifacts built and published successfully:

          | Name | Value |
          | --- | --- |
          | Version | \`${version_without_rc}\` |
          | Git tag | \`${git_tag}\` |

          | Operation | Status |
          | --- | --- |
          | Build source and binary distributions | ✅ |
          | Stage artifacts to Apache dist dev repository | ✅ |
          | Stage artifacts to Apache Nexus staging repository | ✅ |
          | Close Nexus staging repository | ✅ |
          EOT
