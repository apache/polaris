<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Using Polaris on Apache Polaris</title><link>https://polaris.apache.org/releases/1.2.0/getting-started/using-polaris/</link><description>Recent content in Using Polaris on Apache Polaris</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://polaris.apache.org/releases/1.2.0/getting-started/using-polaris/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started with Apache Polaris, External Authentication and Keycloak</title><link>https://polaris.apache.org/releases/1.2.0/getting-started/using-polaris/keycloak-idp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.2.0/getting-started/using-polaris/keycloak-idp/</guid><description>Overview This example uses Keycloak as an external identity provider for Polaris. The &amp;ldquo;iceberg&amp;rdquo; realm is automatically created and configured from the iceberg-realm.json file.
This Keycloak realm contains 1 client definition: client1:s3cr3t. It is configured to return tokens with the following fixed claims:
principal_id: the principal ID of the user. It is always set to zero (0) in this example. principal_name: the principal name of the user. It is always set to &amp;ldquo;root&amp;rdquo; in this example.</description></item><item><title>Getting Started with Apache Polaris, Prometheus and Jaeger</title><link>https://polaris.apache.org/releases/1.2.0/getting-started/using-polaris/telemetry-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.2.0/getting-started/using-polaris/telemetry-tools/</guid><description>This example requires jq to be installed on your machine.
Build the Polaris image if it&amp;rsquo;s not already present locally:
./gradlew \ :polaris-server:assemble \ :polaris-server:quarkusAppPartsBuild --rerun \ -Dquarkus.container-image.build=true Start the docker compose group by running the following command from the root of the repository:
export ASSETS_PATH=$(pwd)/getting-started/assets/ export CLIENT_ID=root export CLIENT_SECRET=s3cr3t docker compose -f getting-started/telemetry/docker-compose.yml up To access Polaris from the host machine, first request an access token:
export POLARIS_TOKEN=$(curl -s http://localhost:8181/api/catalog/v1/oauth/tokens \ --user root:s3cr3t \ -d &amp;#39;grant_type=client_credentials&amp;#39; \ -d &amp;#39;scope=PRINCIPAL_ROLE:ALL&amp;#39; | jq -r .</description></item></channel></rss>