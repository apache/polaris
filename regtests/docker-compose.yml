#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

services:
  polaris:
    image: apache/polaris:latest
    ports:
      - "8181"
      - "8182"
    environment:
      AWS_REGION: us-west-2
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS
      AZURE_TENANT_ID: $AZURE_TENANT_ID
      AZURE_CLIENT_ID: $AZURE_CLIENT_ID
      AZURE_CLIENT_SECRET: $AZURE_CLIENT_SECRET
      MINIO_S3_CATALOG_1_ID: minio-user-catalog
      MINIO_S3_CATALOG_1_SECRET: 12345678-minio-catalog
      POLARIS_BOOTSTRAP_CREDENTIALS: POLARIS,root,secret
      quarkus.log.file.enable: "false"
      quarkus.otel.sdk.disabled: "true"
    volumes:
      - ./credentials:/tmp/credentials/
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8182/q/health"]
      interval: 10s
      timeout: 10s
      retries: 5
  regtest:
    build:
      context: .
      args:
        POLARIS_HOST: polaris
    depends_on:
      polaris:
        condition: service_healthy
    environment:
      AWS_TEST_ENABLED: $AWS_TEST_ENABLED
      AWS_STORAGE_BUCKET: $AWS_STORAGE_BUCKET
      AWS_ROLE_ARN: $AWS_ROLE_ARN
      AWS_TEST_BASE: $AWS_TEST_BASE
      GCS_TEST_ENABLED: $GCS_TEST_ENABLED
      GCS_TEST_BASE: $GCS_TEST_BASE
      GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS
      AZURE_TEST_ENABLED: $AZURE_TEST_ENABLED
      AZURE_TENANT_ID: $AZURE_TENANT_ID
      AZURE_DFS_TEST_BASE: $AZURE_DFS_TEST_BASE
      AZURE_BLOB_TEST_BASE: $AZURE_BLOB_TEST_BASE
      AZURE_CLIENT_ID: $AZURE_CLIENT_ID
      AZURE_CLIENT_SECRET: $AZURE_CLIENT_SECRET
      AWS_CROSS_REGION_TEST_ENABLED: $AWS_CROSS_REGION_TEST_ENABLED
      AWS_CROSS_REGION_BUCKET: $AWS_CROSS_REGION_BUCKET
      AWS_ROLE_FOR_CROSS_REGION_BUCKET: $AWS_ROLE_FOR_CROSS_REGION_BUCKET
      AWS_REGION_FOR_CROSS_REGION_TEST: $AWS_REGION_FOR_CROSS_REGION_TEST
    volumes:
      - ./output:/tmp/polaris-regtests/
      - ./credentials:/tmp/credentials/
  minio-without-tls:
    image: minio/minio:latest
    container_name: minio-without-tls
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    ports:
      - 9000:9000
    volumes:
      - ./minio/miniodata:/data
    command: ["server", "/data"]
  minio-configured-without-tls:
    depends_on:
      - minio-without-tls
    image: minio/mc:latest
    container_name: minio-configured-without-tls
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio-without-tls:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force --quiet minio/warehouse;
      /usr/bin/mc mb --ignore-existing minio/warehouse;
      /usr/bin/mc admin user add minio minio-user-catalog 12345678-minio-catalog;
      /usr/bin/mc admin policy attach minio readwrite --user minio-user-catalog;
      tail -f /dev/null
      "
