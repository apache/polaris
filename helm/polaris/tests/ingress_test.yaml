#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

chart:
  version: 1.2.3
  appVersion: 4.5.6

release:
  name: polaris-release
  namespace: polaris-ns

templates:
  - ingress.yaml

tests:

  # kind
  - it: should not create ingress by default
    asserts:
      - containsDocument:
          kind: Ingress
          apiVersion: networking.k8s.io/v1
        not: true
  - it: should create ingress with enabled
    set:
      ingress.enabled: true
    asserts:
      - containsDocument:
          kind: Ingress
          apiVersion: networking.k8s.io/v1

  # metadata.name (with with ingress enabled)
  - it: should set ingress name
    set:
      ingress.enabled: true
    asserts:
      - equal:
          path: metadata.name
          value: polaris-release
  - it: should set ingress name with override
    set:
      ingress.enabled: true
      nameOverride: polaris-override
    asserts:
      - equal:
          path: metadata.name
          value: polaris-release-polaris-override
  - it: should set ingress name with full override
    set:
      ingress.enabled: true
      fullnameOverride: polaris-override
    asserts:
      - equal:
          path: metadata.name
          value: polaris-override

  # metadata.namespace (with ingress enabled)
  - it: should set ingress namespace
    set:
      ingress.enabled: true
    asserts:
      - equal:
          path: metadata.namespace
          value: polaris-ns

  # metadata.labels (with ingress enabled)
  - it: should set ingress default labels
    set:
      ingress.enabled: true
    asserts:
      - isSubset:
          path: metadata.labels
          content:
            app.kubernetes.io/name: polaris
            app.kubernetes.io/instance: polaris-release
            app.kubernetes.io/version: 4.5.6
            app.kubernetes.io/managed-by: Helm
            helm.sh/chart: polaris-1.2.3

  # metadata.annotations (with ingress enabled)
  - it: should not set ingress annotations by default
    set:
      ingress.enabled: true
    asserts:
      - notExists:
          path: metadata.annotations
  - it: should set ingress annotations
    set:
      ingress.enabled: true
      ingress.annotations:
        nginx.ingress.kubernetes.io/upstream-hash-by: "$binary_remote_addr"
    asserts:
      - isSubset:
          path: metadata.annotations
          content:
            nginx.ingress.kubernetes.io/upstream-hash-by: "$binary_remote_addr"

  # spec.ingressClassName (with ingress enabled)
  - it: should not set ingress class by default
    set:
      ingress.enabled: true
    asserts:
      - notExists:
          path: spec.ingressClassName
  - it: should set ingress class
    set:
      ingress.enabled: true
      ingress.className: nginx
    asserts:
      - equal:
          path: spec.ingressClassName
          value: nginx

  # spec.tls (with ingress enabled)
  - it: should not set ingress TLS by default
    set:
      ingress.enabled: true
    asserts:
      - notExists:
          path: spec.tls
  - it: should set ingress TLS
    set:
      ingress.enabled: true
      ingress.tls:
        - hosts:
            - chart-example1.local
            - chart-example2.local
          secretName: secret1
    asserts:
      - equal:
          path: spec.tls
          value:
            - hosts:
                - "chart-example1.local"
                - "chart-example2.local"
              secretName: secret1

  # spec.rules (with ingress enabled)
  - it: should set ingress TLS
    set:
      ingress.enabled: true
      ingress.hosts:
        - host: chart-example.local
          paths:
            - path: /
              pathType:  Prefix
    asserts:
      - equal:
          path: spec.rules
          value:
            - host: chart-example.local
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: polaris-release
                        port:
                          number: 8181
