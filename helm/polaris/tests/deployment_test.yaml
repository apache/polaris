#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

chart:
  version: 1.2.3
  appVersion: 4.5.6

release:
  name: polaris-release
  namespace: polaris-ns

templates:
  - deployment.yaml

tests:

  # metadata.name
  - it: should set deployment name
    asserts:
      - equal:
          path: metadata.name
          value: polaris-release
  - it: should set deployment name with override
    set:
      nameOverride: polaris-override
    asserts:
      - equal:
          path: metadata.name
          value: polaris-release-polaris-override
  - it: should set deployment name with full override
    set:
      fullnameOverride: polaris-override
    asserts:
      - equal:
          path: metadata.name
          value: polaris-override

  # metadata.namespace
  - it: should set deployment namespace
    asserts:
      - equal:
          path: metadata.namespace
          value: polaris-ns

  # metadata.labels
  - it: should set deployment default labels
    asserts:
      - isSubset:
          path: metadata.labels
          content:
            app.kubernetes.io/name: polaris
            app.kubernetes.io/instance: polaris-release
            app.kubernetes.io/version: 4.5.6
            app.kubernetes.io/managed-by: Helm
            helm.sh/chart: polaris-1.2.3
  - it: should set podLabels in deployment labels
    set:
      podLabels:
        app.kubernetes.io/component: polaris
    asserts:
      - isSubset:
          path: metadata.labels
          content:
            app.kubernetes.io/component: polaris

  # spec.replicas
  - it: should set default replicas
    asserts:
      - equal:
          path: spec.replicas
          value: 1
  - it: should set replicas
    set:
      replicaCount: 3
    asserts:
      - equal:
          path: spec.replicas
          value: 3
  - it: should not set replicas if autoscaling is enabled
    set:
      replicaCount: 3
      autoscaling:
        enabled: true
    asserts:
      - notExists:
          path: spec.replicas

  # spec.revisionHistoryLimit
  - it: should not set revisionHistoryLimit by default with null
    asserts:
      - notExists:
          path: spec.revisionHistoryLimit
  - it: should not set revisionHistoryLimit with quote empty string
    set:
      revisionHistoryLimit: ""
    asserts:
      - notExists:
          path: spec.revisionHistoryLimit
  - it: should not set revisionHistoryLimit with empty string
    set:
      revisionHistoryLimit:
    asserts:
      - notExists:
          path: spec.revisionHistoryLimit
  - it: should set revisionHistoryLimit
    set:
      revisionHistoryLimit: 1
    asserts:
      - equal:
          path: spec.revisionHistoryLimit
          value: 1
  - it: should set revisionHistoryLimit (disabled revision history)
    set:
      revisionHistoryLimit: 0
    asserts:
      - equal:
          path: spec.revisionHistoryLimit
          value: 0

  # spec.selector.matchLabels + spec.template.metadata.labels
  - it: should set deployment selector labels
    asserts:
      - isSubset:
          path: spec.selector.matchLabels
          content:
            app.kubernetes.io/name: polaris
            app.kubernetes.io/instance: polaris-release
      - isSubset:
          path: spec.template.metadata.labels
          content:
            app.kubernetes.io/name: polaris
            app.kubernetes.io/instance: polaris-release
  - it: should include podLabels in spec.template.metadata.labels only
    set:
      podLabels:
        app.kubernetes.io/component: polaris
    asserts:
      - isNotSubset:
          path: spec.selector.matchLabels
          content:
              app.kubernetes.io/component: polaris
      - isSubset:
          path: spec.template.metadata.labels
          content:
            app.kubernetes.io/component: polaris

  # spec.template.metadata.annotations
  - it: should not set pod annotations by default
    asserts:
      - notExists:
          path: spec.template.metadata.annotations
  - it: should set pod annotations
    set:
      podAnnotations:
        foo: bar
    asserts:
      - isSubset:
          path: spec.template.metadata.annotations
          content:
            foo: bar

  # spec.template.spec.imagePullSecrets
  - it: should not set imagePullSecrets by default
    asserts:
      - notExists:
          path: spec.template.spec.imagePullSecrets
  - it: should set imagePullSecrets
    set:
      imagePullSecrets:
        - test-secret
    asserts:
      - contains:
          path: spec.template.spec.imagePullSecrets
          content:
            name: test-secret

  # spec.template.spec.serviceAccountName
  - it: should set default service account name
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: polaris-release
  - it: should set service account name when serviceAccount.create is true
    set:
      serviceAccount:
        create: true
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: polaris-release
  - it: should set custom service account name when serviceAccount.create is true
    set:
      serviceAccount:
        create: true
        name: polaris-sa
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: polaris-sa
  - it: should set service account name to default when serviceAccount.create is false
    set:
      serviceAccount:
        create: false
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: default
  - it: should set custom service account name when serviceAccount.create is false
    set:
      serviceAccount:
        create: false
        name: polaris-sa
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: polaris-sa

  # spec.template.spec.securityContext
  - it: should set securityContext by default
    asserts:
      - isSubset:
          path: spec.template.spec.securityContext
          content:
            fsGroup: 10001
            seccompProfile:
              type: RuntimeDefault
  - it: should set custom securityContext
    set:
      podSecurityContext:
        fsGroup: 1234
    asserts:
      - isSubset:
          path: spec.template.spec.securityContext
          content:
            fsGroup: 1234

  # spec.template.spec.containers
  - it: should set container name
    asserts:
      - equal:
          path: spec.template.spec.containers[0].name
          value: polaris

  # spec.template.spec.containers[0].securityContext
  - it: should set container securityContext by default
    asserts:
      - isSubset:
          path: spec.template.spec.containers[0].securityContext
          content:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 10000
            capabilities:
              drop: [ "ALL" ]
            seccompProfile:
              type: RuntimeDefault
  - it: should set custom container securityContext
    set:
      containerSecurityContext:
        allowPrivilegeEscalation: true
        runAsNonRoot: false
        runAsUser: 1234
    asserts:
      - isSubset:
          path: spec.template.spec.containers[0].securityContext
          content:
            allowPrivilegeEscalation: true
            runAsNonRoot: false
            runAsUser: 1234

  # spec.template.spec.containers[0].image
  - it: should set container image
    set:
      image:
        repository: test-repo
        tag: test-tag
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: test-repo:test-tag
  - it: should set container image with template
    set:
      image:
        repository: test-repo-{{ .Chart.Version }}
        tag: test-tag-{{ .Release.Name }}
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: test-repo-1.2.3:test-tag-polaris-release
  - it: should set container image with chart version if no tag provided
    set:
      image:
        repository: test-repo
        tag: ""
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: test-repo:1.2.3

  # spec.template.spec.containers[0].imagePullPolicy
  - it: should set container pull policy
    set:
      image:
        pullPolicy: Always
    asserts:
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: Always

  # spec.template.spec.containers[0].env
  - it: should not set container env by default
    asserts:
      - notExists:
          path: spec.template.spec.containers[0].env
  - it: should set container env
    set:
      extraEnv:
        - name: foo
          value: bar
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: foo
            value: bar

  # spec.template.spec.containers[0].volumeMounts + spec.template.spec.volumes
  - it: should not set persistence volumes by default
    asserts:
      - lengthEqual:
          path: spec.template.spec.volumes
          count: 2 # config-volume + temp-dir
      - lengthEqual:
          path: spec.template.spec.containers[0].volumeMounts
          count: 2 # config-volume + temp-dir
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: config-volume
            mountPath: /deployments/config
            readOnly: true

  - it: should evaluate template expressions in persistence secret name
    set:
      persistence:
        type: eclipse-link
        eclipseLink:
          secret:
            name: "{{ .Release.Name }}-persistence-secret"
    asserts:
      - contains:
          path: spec.template.spec.volumes
          content:
            name: config-volume
            projected:
              sources:
                  - configMap:
                      items:
                        - key: application.properties
                          path: application.properties
                      name: polaris-release
                  - secret:
                      items:
                        - key: persistence.xml
                          path: persistence.xml
                      name: polaris-release-persistence-secret

  # spec.template.spec.containers[0].ports
  - it: should set container ports by default
    asserts:
      - lengthEqual:
          path: spec.template.spec.containers[0].ports
          count: 2
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: polaris-http
            containerPort: 8181
            protocol: TCP
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: polaris-mgmt
            containerPort: 8182
            protocol: TCP

  - it: should set custom container ports
    set:
      service:
        ports:
          - name: polaris-custom
            port: 18181
      managementService:
        ports:
          - name: mgmt-custom
            port: 18182
      extraServices:
        - nameSuffix: "-extra"
          type: LoadBalancer
          ports:
            - name: extra-port
              port: 18183
    asserts:
      - lengthEqual:
          path: spec.template.spec.containers[0].ports
          count: 3
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: polaris-custom
            containerPort: 18181
            protocol: TCP
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: mgmt-custom
            containerPort: 18182
            protocol: TCP
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: extra-port
            containerPort: 18183
            protocol: TCP

  - it: should use targetPort if defined
    set:
      service:
        ports:
          - name: polaris-custom
            port: 18181
            targetPort: 8181
      managementService:
        ports:
          - name: mgmt-custom
            port: 18182
            targetPort: 8182
      extraServices:
        - nameSuffix: "-extra"
          ports:
            - name: extra-port
              port: 18183
              targetPort: 8183
    asserts:
      - lengthEqual:
          path: spec.template.spec.containers[0].ports
          count: 3
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: polaris-custom
            containerPort: 8181
            protocol: TCP
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: mgmt-custom
            containerPort: 8182
            protocol: TCP
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: extra-port
            containerPort: 8183
            protocol: TCP

  - it: should fail if port name is not unique (#1)
    set:
      service:
        ports:
          - name: polaris-http
            port: 8181
          - name: polaris-http
            port: 18181
    asserts:
      - failedTemplate:
          errorPattern: "service.ports\\[\\d\\]: port name already taken: polaris-http"

  - it: should fail if port name is not unique (#2)
    set:
      managementService:
        ports:
          - name: polaris-mgmt
            port: 8182
          - name: polaris-mgmt
            port: 18182
    asserts:
      - failedTemplate:
          errorPattern: "managementService.ports\\[\\d\\]: port name already taken: polaris-mgmt"

  - it: should fail if port name is not unique (#3)
    set:
      service:
        ports:
          - name: polaris
            port: 8181
      managementService:
        ports:
          - name: polaris
            port: 8182
    asserts:
      - failedTemplate:
          errorPattern: "managementService.ports\\[\\d\\]: port name already taken: polaris"

  - it: should not fail when extra service references the same port name and number
    set:
      extraServices:
        - nameSuffix: "-extra"
          type: LoadBalancer
          ports:
            - name: polaris-http
              port: 8181
    asserts:
      - lengthEqual:
          path: spec.template.spec.containers[0].ports
          count: 2
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: polaris-http
            containerPort: 8181
            protocol: TCP
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: polaris-mgmt
            containerPort: 8182
            protocol: TCP

  - it: should fail when extra service references the same port name with different number (#1)
    set:
      extraServices:
        - nameSuffix: "-extra"
          type: LoadBalancer
          ports:
            - name: polaris-http
              port: 9999
    asserts:
        - failedTemplate:
            errorPattern: "extraServices\\[\\d\\].ports\\[\\d\\]: wrong port number for port polaris-http, expected 8181, got 9999"

  - it: should fail when extra service references the same port name with different number (#2)
    set:
      extraServices:
        - nameSuffix: "-extra"
          type: LoadBalancer
          ports:
            - name: polaris-mgmt
              port: 9999
    asserts:
        - failedTemplate:
            errorPattern: "extraServices\\[\\d\\].ports\\[\\d\\]: wrong port number for port polaris-mgmt, expected 8182, got 9999"

  - it: should fail when extra service references the same port name with different number (#3)
    set:
      service:
        ports:
          - name: polaris-http
            port: 8181
          - name: polaris-https
            port: 8043
      extraServices:
        - nameSuffix: "-extra"
          type: LoadBalancer
          ports:
            - name: polaris-https
              port: 9999
    asserts:
        - failedTemplate:
            errorPattern: "extraServices\\[\\d\\].ports\\[\\d\\]: wrong port number for port polaris-https, expected 8043, got 9999"

  - it: should fail when extra service references the same port name with different protocol
    set:
      service:
        ports:
          - name: polaris-http
            port: 8181
      extraServices:
        - nameSuffix: "-extra"
          type: LoadBalancer
          ports:
            - name: polaris-http
              port: 8181
              protocol: UDP
    asserts:
        - failedTemplate:
            errorPattern: "extraServices\\[\\d\\].ports\\[\\d\\]: wrong protocol for port polaris-http, expected TCP, got UDP"

  - it: should create 2 ports with same number
    set:
      service:
        ports:
          - name: polaris-http
            port: 8181
          - name: polaris-http2
            port: 8181
    asserts:
      - lengthEqual:
          path: spec.template.spec.containers[0].ports
          count: 3
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: polaris-http
            containerPort: 8181
            protocol: TCP
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: polaris-http2
            containerPort: 8181
            protocol: TCP
  - it: should create 2 ports with same number using targetPort
    set:
      service:
        ports:
          - name: polaris-http
            port: 18181
            targetPort: 8181
          - name: polaris-http2
            port: 18181
            targetPort: 8181
    asserts:
      - lengthEqual:
          path: spec.template.spec.containers[0].ports
          count: 3
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: polaris-http
            containerPort: 8181
            protocol: TCP
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: polaris-http2
            containerPort: 8181
            protocol: TCP
  - it: should set port protocols
    set:
      service:
        ports:
          - name: polaris-http
            port: 8181
            protocol: UDP
      managementService:
        ports:
          - name: polaris-mgmt
            port: 8182
            protocol: UDP
      extraServices:
        - nameSuffix: "-extra"
          type: LoadBalancer
          ports:
            - name: polaris-extra
              port: 8183
              protocol: UDP
    asserts:
      - lengthEqual:
          path: spec.template.spec.containers[0].ports
          count: 3
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: polaris-http
            containerPort: 8181
            protocol: UDP
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: polaris-mgmt
            containerPort: 8182
            protocol: UDP
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: polaris-extra
            containerPort: 8183
            protocol: UDP

  # spec.template.spec.containers[0].livenessProbe
  - it: should set container livenessProbe by default
    set:
      managementService:
        ports:
          - name: mgmt-custom
            port: 9999
      livenessProbe:
        initialDelaySeconds: 11
        periodSeconds: 22
        successThreshold: 33
        failureThreshold: 44
        timeoutSeconds: 55
        terminationGracePeriodSeconds: 66
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe
          value:
            httpGet:
              path: /q/health/live
              port: mgmt-custom
              scheme: HTTP
            initialDelaySeconds: 11
            periodSeconds: 22
            successThreshold: 33
            failureThreshold: 44
            timeoutSeconds: 55
            terminationGracePeriodSeconds: 66

  # spec.template.spec.containers[0].readinessProbe
  - it: should set container readinessProbe by default
    set:
      managementService:
        ports:
          - name: mgmt-custom
            port: 9999
      readinessProbe:
        initialDelaySeconds: 11
        periodSeconds: 22
        successThreshold: 33
        failureThreshold: 44
        timeoutSeconds: 55
    asserts:
      - equal:
          path: spec.template.spec.containers[0].readinessProbe
          value:
            httpGet:
              path: /q/health/ready
              port: mgmt-custom
              scheme: HTTP
            initialDelaySeconds: 11
            periodSeconds: 22
            successThreshold: 33
            failureThreshold: 44
            timeoutSeconds: 55

  # spec.template.spec.containers[0].resources
  - it: should not set container resources by default
    asserts:
      - notExists:
          path: spec.template.spec.containers[0].resources
  - it: should set container resources
    set:
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 200m
          memory: 256Mi
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources
          value:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi

  # spec.template.spec.nodeSelector
  - it: should not set nodeSelector by default
    asserts:
      - notExists:
          path: spec.template.spec.nodeSelector
  - it: should set nodeSelector
    set:
      nodeSelector:
        disktype: ssd
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector
          value:
            disktype: ssd

  # spec.template.spec.affinity
  - it: should not set affinity by default
    asserts:
      - notExists:
          path: spec.template.spec.affinity
  - it: should set affinity
    set:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: zone
                    operator: In
                    values:
                      - zone1
                      - zone2
    asserts:
      - equal:
          path: spec.template.spec.affinity
          value:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: zone
                        operator: In
                        values:
                          - zone1
                          - zone2

  # spec.template.spec.tolerations
  - it: should not set tolerations by default
    asserts:
      - notExists:
          path: spec.template.spec.tolerations
  - it: should set tolerations
    set:
      tolerations:
        - key: "key"
          operator: "Equal"
          value: "value"
          effect: "NoSchedule"
    asserts:
      - equal:
          path: spec.template.spec.tolerations
          value:
            - key: "key"
              operator: "Equal"
              value: "value"
              effect: "NoSchedule"

  - it: should set storage credentials
    set:
      storage:
        secret:
          name: polaris-storage-secret
          awsAccessKeyId: awsAccessKeyId
          awsSecretAccessKey: awsSecretAccessKey
          gcpToken: gcpToken
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: polaris.storage.aws.access-key
            valueFrom:
              secretKeyRef:
                name: polaris-storage-secret
                key: awsAccessKeyId
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: polaris.storage.aws.secret-key
            valueFrom:
              secretKeyRef:
                name: polaris-storage-secret
                key: awsSecretAccessKey
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: polaris.storage.gcp.token
            valueFrom:
              secretKeyRef:
                name: polaris-storage-secret
                key: gcpToken

  - it: should set extra env
    set:
      extraEnv:
        - name: foo
          value: bar
        - name: baz
          valueFrom:
            secretKeyRef:
              name: secret
              key: key
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: foo
            value: bar
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: baz
            valueFrom:
              secretKeyRef:
                name: secret
                key: key

  - it: should set extra env + storage credentials
    set:
      storage:
        secret:
          name: polaris-storage-secret
          awsAccessKeyId: awsAccessKeyId
      extraEnv:
        - name: foo
          value: bar
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
              name: foo
              value: bar
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: polaris.storage.aws.access-key
            valueFrom:
              secretKeyRef:
                name: polaris-storage-secret
                key: awsAccessKeyId

  - it: should not set any environment variables by default
    asserts:
      - notExists:
          path: spec.template.spec.containers[0].env

  - it: should configure config volume
    set:
      image.configDir: /config/dir
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: config-volume
            mountPath: /config/dir
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: config-volume
            projected:
              sources:
                - configMap:
                    name: polaris-release
                    items:
                      - key: application.properties
                        path: application.properties

  - it: should configure config volume with token broker secret
    set:
      image.configDir: /config/dir
      authentication:
        tokenBroker:
          secret:
            name: polaris-token-broker
            publicKey: public.key
            privateKey: private.key
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: config-volume
            mountPath: /config/dir
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: config-volume
            projected:
              sources:
                - configMap:
                    name: polaris-release
                    items:
                      - key: application.properties
                        path: application.properties
                - secret:
                    name: polaris-token-broker
                    items:
                      - key: public.key
                        path: public.pem
                      - key: private.key
                        path: private.pem

  - it: should configure config volume with persistence secret
    set:
      image.configDir: /config/dir
      persistence:
        type: eclipse-link
        eclipseLink:
          secret:
            name: polaris-persistence
            key: custom.xml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: config-volume
            mountPath: /config/dir
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: config-volume
            projected:
              sources:
                - configMap:
                    name: polaris-release
                    items:
                      - key: application.properties
                        path: application.properties
                - secret:
                    name: polaris-persistence
                    items:
                      - key: custom.xml
                        path: persistence.xml

  - it: should configure volume for file logging
    set:
      logging.file.enabled: true
      logging.file.logsDir: /custom/logs
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: logs-storage
            mountPath: /custom/logs
            readOnly: false
      - contains:
          path: spec.template.spec.volumes
          content:
            name: logs-storage
            persistentVolumeClaim:
              claimName: polaris-release-logs

  - it: should include extra volumes and volume mounts
    set:
      extraVolumes:
        - name: extra-volume
          emptyDir: {}
      extraVolumeMounts:
        - name: extra-volume
          mountPath: /extra
          readOnly: false
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: extra-volume
            mountPath: /extra
            readOnly: false
      - contains:
          path: spec.template.spec.volumes
          content:
            name: extra-volume
            emptyDir: {}
