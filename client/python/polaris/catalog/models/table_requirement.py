#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# coding: utf-8

"""
    Apache Iceberg REST Catalog API

    Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from polaris.catalog.models.assert_create import AssertCreate
from polaris.catalog.models.assert_current_schema_id import AssertCurrentSchemaId
from polaris.catalog.models.assert_default_sort_order_id import AssertDefaultSortOrderId
from polaris.catalog.models.assert_default_spec_id import AssertDefaultSpecId
from polaris.catalog.models.assert_last_assigned_field_id import AssertLastAssignedFieldId
from polaris.catalog.models.assert_last_assigned_partition_id import AssertLastAssignedPartitionId
from polaris.catalog.models.assert_ref_snapshot_id import AssertRefSnapshotId
from polaris.catalog.models.assert_table_uuid import AssertTableUUID
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

TABLEREQUIREMENT_ONE_OF_SCHEMAS = ["AssertCreate", "AssertCurrentSchemaId", "AssertDefaultSortOrderId", "AssertDefaultSpecId", "AssertLastAssignedFieldId", "AssertLastAssignedPartitionId", "AssertRefSnapshotId", "AssertTableUUID"]

class TableRequirement(BaseModel):
    """
    TableRequirement
    """
    # data type: AssertCreate
    oneof_schema_1_validator: Optional[AssertCreate] = None
    # data type: AssertTableUUID
    oneof_schema_2_validator: Optional[AssertTableUUID] = None
    # data type: AssertRefSnapshotId
    oneof_schema_3_validator: Optional[AssertRefSnapshotId] = None
    # data type: AssertLastAssignedFieldId
    oneof_schema_4_validator: Optional[AssertLastAssignedFieldId] = None
    # data type: AssertCurrentSchemaId
    oneof_schema_5_validator: Optional[AssertCurrentSchemaId] = None
    # data type: AssertLastAssignedPartitionId
    oneof_schema_6_validator: Optional[AssertLastAssignedPartitionId] = None
    # data type: AssertDefaultSpecId
    oneof_schema_7_validator: Optional[AssertDefaultSpecId] = None
    # data type: AssertDefaultSortOrderId
    oneof_schema_8_validator: Optional[AssertDefaultSortOrderId] = None
    actual_instance: Optional[Union[AssertCreate, AssertCurrentSchemaId, AssertDefaultSortOrderId, AssertDefaultSpecId, AssertLastAssignedFieldId, AssertLastAssignedPartitionId, AssertRefSnapshotId, AssertTableUUID]] = None
    one_of_schemas: Set[str] = { "AssertCreate", "AssertCurrentSchemaId", "AssertDefaultSortOrderId", "AssertDefaultSpecId", "AssertLastAssignedFieldId", "AssertLastAssignedPartitionId", "AssertRefSnapshotId", "AssertTableUUID" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = TableRequirement.model_construct()
        error_messages = []
        match = 0
        # validate data type: AssertCreate
        if not isinstance(v, AssertCreate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AssertCreate`")
        else:
            match += 1
        # validate data type: AssertTableUUID
        if not isinstance(v, AssertTableUUID):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AssertTableUUID`")
        else:
            match += 1
        # validate data type: AssertRefSnapshotId
        if not isinstance(v, AssertRefSnapshotId):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AssertRefSnapshotId`")
        else:
            match += 1
        # validate data type: AssertLastAssignedFieldId
        if not isinstance(v, AssertLastAssignedFieldId):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AssertLastAssignedFieldId`")
        else:
            match += 1
        # validate data type: AssertCurrentSchemaId
        if not isinstance(v, AssertCurrentSchemaId):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AssertCurrentSchemaId`")
        else:
            match += 1
        # validate data type: AssertLastAssignedPartitionId
        if not isinstance(v, AssertLastAssignedPartitionId):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AssertLastAssignedPartitionId`")
        else:
            match += 1
        # validate data type: AssertDefaultSpecId
        if not isinstance(v, AssertDefaultSpecId):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AssertDefaultSpecId`")
        else:
            match += 1
        # validate data type: AssertDefaultSortOrderId
        if not isinstance(v, AssertDefaultSortOrderId):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AssertDefaultSortOrderId`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in TableRequirement with oneOf schemas: AssertCreate, AssertCurrentSchemaId, AssertDefaultSortOrderId, AssertDefaultSpecId, AssertLastAssignedFieldId, AssertLastAssignedPartitionId, AssertRefSnapshotId, AssertTableUUID. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in TableRequirement with oneOf schemas: AssertCreate, AssertCurrentSchemaId, AssertDefaultSortOrderId, AssertDefaultSpecId, AssertLastAssignedFieldId, AssertLastAssignedPartitionId, AssertRefSnapshotId, AssertTableUUID. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AssertCreate
        try:
            instance.actual_instance = AssertCreate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AssertTableUUID
        try:
            instance.actual_instance = AssertTableUUID.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AssertRefSnapshotId
        try:
            instance.actual_instance = AssertRefSnapshotId.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AssertLastAssignedFieldId
        try:
            instance.actual_instance = AssertLastAssignedFieldId.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AssertCurrentSchemaId
        try:
            instance.actual_instance = AssertCurrentSchemaId.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AssertLastAssignedPartitionId
        try:
            instance.actual_instance = AssertLastAssignedPartitionId.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AssertDefaultSpecId
        try:
            instance.actual_instance = AssertDefaultSpecId.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AssertDefaultSortOrderId
        try:
            instance.actual_instance = AssertDefaultSortOrderId.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into TableRequirement with oneOf schemas: AssertCreate, AssertCurrentSchemaId, AssertDefaultSortOrderId, AssertDefaultSpecId, AssertLastAssignedFieldId, AssertLastAssignedPartitionId, AssertRefSnapshotId, AssertTableUUID. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into TableRequirement with oneOf schemas: AssertCreate, AssertCurrentSchemaId, AssertDefaultSortOrderId, AssertDefaultSpecId, AssertLastAssignedFieldId, AssertLastAssignedPartitionId, AssertRefSnapshotId, AssertTableUUID. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AssertCreate, AssertCurrentSchemaId, AssertDefaultSortOrderId, AssertDefaultSpecId, AssertLastAssignedFieldId, AssertLastAssignedPartitionId, AssertRefSnapshotId, AssertTableUUID]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


