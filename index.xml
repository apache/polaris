<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Apache Polaris</title><link>https://polaris.apache.org/</link><description>Recent content on Apache Polaris</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 02 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://polaris.apache.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a catalog on AWS S3</title><link>https://polaris.apache.org/in-dev/unreleased/getting-started/creating-a-catalog/s3/catalog-aws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/getting-started/creating-a-catalog/s3/catalog-aws/</guid><description>When creating a catalog based on AWS S3 storage only the role-arn is a required parameter. However, usually one also provides the region and external-id.
Note: the name quickstart_catalog from the example below is referenced in other Getting Started examples, but of course, it can be any valid catalog name.
CLIENT_ID=root CLIENT_SECRET=s3cr3t DEFAULT_BASE_LOCATION=s3://example-bucket/my_data ROLE_ARN=arn:aws:iam::111122223333:role/ExampleCorpRole REGION=us-west-2 EXTERNAL_ID=12345678901234567890 ./polaris \ --client-id ${CLIENT_ID} \ --client-secret ${CLIENT_SECRET} \ catalogs \ create \ --storage-type s3 \ --default-base-location ${DEFAULT_BASE_LOCATION} \ --role-arn ${ROLE_ARN} \ --region ${REGION} \ --external-id ${EXTERNAL_ID} \ quickstart_catalog</description></item><item><title>Installing Dependencies</title><link>https://polaris.apache.org/in-dev/unreleased/getting-started/install-dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/getting-started/install-dependencies/</guid><description>This guide serves as an introduction to several key entities that can be managed with Apache Polaris (Incubating), describes how to build and deploy Polaris locally, and finally includes examples of how to use Polaris with Apache Spark™.
Prerequisites This guide covers building Polaris, deploying it locally or via Docker, and interacting with it using the command-line interface and Apache Spark. Before proceeding with Polaris, be sure to satisfy the relevant prerequisites listed here.</description></item><item><title>Installing Dependencies</title><link>https://polaris.apache.org/releases/1.0.0/getting-started/install-dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/getting-started/install-dependencies/</guid><description>This guide serves as an introduction to several key entities that can be managed with Apache Polaris (Incubating), describes how to build and deploy Polaris locally, and finally includes examples of how to use Polaris with Apache Spark™.
Prerequisites This guide covers building Polaris, deploying it locally or via Docker, and interacting with it using the command-line interface and Apache Spark. Before proceeding with Polaris, be sure to satisfy the relevant prerequisites listed here.</description></item><item><title>Installing Dependencies</title><link>https://polaris.apache.org/releases/1.0.1/getting-started/install-dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/getting-started/install-dependencies/</guid><description>This guide serves as an introduction to several key entities that can be managed with Apache Polaris (Incubating), describes how to build and deploy Polaris locally, and finally includes examples of how to use Polaris with Apache Spark™.
Prerequisites This guide covers building Polaris, deploying it locally or via Docker, and interacting with it using the command-line interface and Apache Spark. Before proceeding with Polaris, be sure to satisfy the relevant prerequisites listed here.</description></item><item><title>Installing Dependencies</title><link>https://polaris.apache.org/releases/1.1.0/getting-started/install-dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/getting-started/install-dependencies/</guid><description>This guide serves as an introduction to several key entities that can be managed with Apache Polaris (Incubating), describes how to build and deploy Polaris locally, and finally includes examples of how to use Polaris with Apache Spark™.
Prerequisites This guide covers building Polaris, deploying it locally or via Docker, and interacting with it using the command-line interface and Apache Spark. Before proceeding with Polaris, be sure to satisfy the relevant prerequisites listed here.</description></item><item><title>Apache Polaris Management Service OpenAPI Specification</title><link>https://polaris.apache.org/in-dev/unreleased/polaris-api-specs/polaris-management-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/polaris-api-specs/polaris-management-api/</guid><description> Top</description></item><item><title>Quick Start</title><link>https://polaris.apache.org/releases/0.9.0/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/0.9.0/quickstart/</guid><description>This guide serves as a introduction to several key entities that can be managed with Apache Polaris (Incubating), describes how to build and deploy Polaris locally, and finally includes examples of how to use Polaris with Apache Spark™.
Prerequisites This guide covers building Polaris, deploying it locally or via Docker, and interacting with it using the command-line interface and Apache Spark. Before proceeding with Polaris, be sure to satisfy the relevant prerequisites listed here.</description></item><item><title>Role-Based Access Control</title><link>https://polaris.apache.org/in-dev/unreleased/managing-security/access-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/managing-security/access-control/</guid><description>This section provides information about how access control works for Apache Polaris (Incubating).
Polaris uses a role-based access control (RBAC) model in which the Polaris administrator assigns access privileges to catalog roles and then grants access to resources to principals by assigning catalog roles to principal roles.
These are the key concepts to understanding access control in Polaris:
Securable object Principal role Catalog role Privilege Securable object A securable object is an object to which access can be granted.</description></item><item><title>Apache Polaris Catalog Service OpenAPI Specification</title><link>https://polaris.apache.org/in-dev/unreleased/polaris-api-specs/polaris-catalog-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/polaris-api-specs/polaris-catalog-api/</guid><description> Top</description></item><item><title>Creating a catalog on Google Cloud Storage (GCS)</title><link>https://polaris.apache.org/in-dev/unreleased/getting-started/creating-a-catalog/catalog-gcs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/getting-started/creating-a-catalog/catalog-gcs/</guid><description>For the polaris catalogs create command there are few gcs only options
--storage-type gcs --service-account (Only for GCS) The service account to use when connecting to GCS example CLIENT_ID=root \ CLIENT_SECRET=s3cr3t \ DEFAULT_BASE_LOCATION=gs://my-ml-bucket/predictions/ \ SERVICE_ACCOUNT=serviceAccount:my-service-account@my-project.iam.gserviceaccount.com \ ./polaris \ --client-id ${CLIENT_ID} \ --client-secret ${CLIENT_SECRET} \ catalogs \ create \ --storage-type gcs \ --service-account ${SERVICE_ACCOUNT} \ --default-base-location ${DEFAULT_BASE_LOCATION} \ my_gcs_catalog</description></item><item><title>Deploying Polaris locally</title><link>https://polaris.apache.org/in-dev/unreleased/getting-started/deploying-polaris/local-deploy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/getting-started/deploying-polaris/local-deploy/</guid><description>Polaris can be deployed via a docker image or as a standalone process. Before starting, be sure that you&amp;rsquo;ve satisfied the relevant prerequisites detailed in the previous page.
Common Setup Before running Polaris, ensure you have completed the following setup steps:
Build Polaris cd ~/polaris ./gradlew \ :polaris-server:assemble \ :polaris-server:quarkusAppPartsBuild --rerun \ :polaris-admin:assemble \ :polaris-admin:quarkusAppPartsBuild --rerun \ -Dquarkus.container-image.build=true For standalone: Omit the -Dquarkus.container-image.tag and -Dquarkus.container-image.build options if you do not need to build a Docker image.</description></item><item><title>Creating a catalog on MinIO</title><link>https://polaris.apache.org/in-dev/unreleased/getting-started/creating-a-catalog/s3/catalog-minio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/getting-started/creating-a-catalog/s3/catalog-minio/</guid><description>When creating a catalog based on MinIO storage it is important to configure the endpoint property to point to your own MinIO cluster. If the endpoint property is not set, Polaris will attempt to contact AWS storage services (which is certain to fail in this case).
Note: the region setting is not required by MinIO, but it is set in this example for the sake of simplicity as it is usually required by the AWS SDK (used internally by Polaris).</description></item><item><title>Overview</title><link>https://polaris.apache.org/releases/0.9.0/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/0.9.0/overview/</guid><description>Apache Polaris (Incubating) is a catalog implementation for Apache Iceberg™ tables and is built on the open source Apache Iceberg™ REST protocol.
With Polaris, you can provide centralized, secure read and write access to your Iceberg tables across different REST-compatible query engines.
Key concepts This section introduces key concepts associated with using Apache Polaris (Incubating).
In the following diagram, a sample Apache Polaris (Incubating) structure with nested namespaces is shown for Catalog1.</description></item><item><title>Apache Polaris Proposals &amp; Roadmap</title><link>https://polaris.apache.org/community/proposals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/community/proposals/</guid><description>Proposals Active
Past
Polaris Roadmap Discussed Roadmap</description></item><item><title>Quickstart</title><link>https://polaris.apache.org/releases/1.0.0/getting-started/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/getting-started/quickstart/</guid><description>Polaris can be deployed via a docker image or as a standalone process. Before starting, be sure that you&amp;rsquo;ve satisfied the relevant prerequisites detailed in the previous page.
Common Setup Before running Polaris, ensure you have completed the following setup steps:
Build Polaris cd ~/polaris ./gradlew \ :polaris-server:assemble \ :polaris-server:quarkusAppPartsBuild \ :polaris-admin:assemble --rerun \ -Dquarkus.container-image.tag=postgres-latest \ -Dquarkus.container-image.build=true For standalone: Omit the -Dquarkus.container-image.tag and -Dquarkus.container-image.build options if you do not need to build a Docker image.</description></item><item><title>Quickstart</title><link>https://polaris.apache.org/releases/1.0.1/getting-started/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/getting-started/quickstart/</guid><description>Polaris can be deployed via a docker image or as a standalone process. Before starting, be sure that you&amp;rsquo;ve satisfied the relevant prerequisites detailed in the previous page.
Common Setup Before running Polaris, ensure you have completed the following setup steps:
Build Polaris cd ~/polaris ./gradlew \ :polaris-server:assemble \ :polaris-server:quarkusAppPartsBuild \ :polaris-admin:assemble --rerun \ -Dquarkus.container-image.tag=postgres-latest \ -Dquarkus.container-image.build=true For standalone: Omit the -Dquarkus.container-image.tag and -Dquarkus.container-image.build options if you do not need to build a Docker image.</description></item><item><title>Quickstart</title><link>https://polaris.apache.org/releases/1.1.0/getting-started/quickstart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/getting-started/quickstart/</guid><description>Polaris can be deployed via a docker image or as a standalone process. Before starting, be sure that you&amp;rsquo;ve satisfied the relevant prerequisites detailed in the previous page.
Common Setup Before running Polaris, ensure you have completed the following setup steps:
Build Polaris cd ~/polaris ./gradlew \ :polaris-server:assemble \ :polaris-server:quarkusAppPartsBuild --rerun \ :polaris-admin:assemble \ :polaris-admin:quarkusAppPartsBuild --rerun \ -Dquarkus.container-image.build=true For standalone: Omit the -Dquarkus.container-image.tag and -Dquarkus.container-image.build options if you do not need to build a Docker image.</description></item><item><title>Admin Tool</title><link>https://polaris.apache.org/in-dev/unreleased/admin-tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/admin-tool/</guid><description>Polaris includes a tool for administrators to manage the metastore.
The tool must be built with the necessary JDBC drivers to access the metastore database. For example, to build the tool with support for Postgres, run the following:
./gradlew \ :polaris-admin:assemble \ :polaris-admin:quarkusAppPartsBuild --rerun \ -Dquarkus.container-image.build=true The above command will generate:
One Fast-JAR in runtime/admin/build/quarkus-app/quarkus-run.jar Two Docker images named apache/polaris-admin-tool:latest and apache/polaris-admin-tool:&amp;lt;version&amp;gt; Usage Please make sure the admin tool and Polaris server are with the same version before using it.</description></item><item><title>Admin Tool</title><link>https://polaris.apache.org/releases/1.0.0/admin-tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/admin-tool/</guid><description>Polaris includes a tool for administrators to manage the metastore.
The tool must be built with the necessary JDBC drivers to access the metastore database. For example, to build the tool with support for Postgres, run the following:
./gradlew \ :polaris-admin:assemble \ :polaris-admin:quarkusAppPartsBuild --rerun \ -Dquarkus.container-image.build=true The above command will generate:
One standalone JAR in runtime/admin/build/polaris-admin-*-runner.jar Two distribution archives in runtime/admin/build/distributions Two Docker images named apache/polaris-admin-tool:latest and apache/polaris-admin-tool:&amp;lt;version&amp;gt; Usage Please make sure the admin tool and Polaris server are with the same version before using it.</description></item><item><title>Admin Tool</title><link>https://polaris.apache.org/releases/1.0.1/admin-tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/admin-tool/</guid><description>Polaris includes a tool for administrators to manage the metastore.
The tool must be built with the necessary JDBC drivers to access the metastore database. For example, to build the tool with support for Postgres, run the following:
./gradlew \ :polaris-admin:assemble \ :polaris-admin:quarkusAppPartsBuild --rerun \ -Dquarkus.container-image.build=true The above command will generate:
One standalone JAR in runtime/admin/build/polaris-admin-*-runner.jar Two distribution archives in runtime/admin/build/distributions Two Docker images named apache/polaris-admin-tool:latest and apache/polaris-admin-tool:&amp;lt;version&amp;gt; Usage Please make sure the admin tool and Polaris server are with the same version before using it.</description></item><item><title>Admin Tool</title><link>https://polaris.apache.org/releases/1.1.0/admin-tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/admin-tool/</guid><description>Polaris includes a tool for administrators to manage the metastore.
The tool must be built with the necessary JDBC drivers to access the metastore database. For example, to build the tool with support for Postgres, run the following:
./gradlew \ :polaris-admin:assemble \ :polaris-admin:quarkusAppPartsBuild --rerun \ -Dquarkus.container-image.build=true The above command will generate:
One Fast-JAR in runtime/admin/build/quarkus-app/quarkus-run.jar Two Docker images named apache/polaris-admin-tool:latest and apache/polaris-admin-tool:&amp;lt;version&amp;gt; Usage Please make sure the admin tool and Polaris server are with the same version before using it.</description></item><item><title>Creating a catalog on Azure</title><link>https://polaris.apache.org/in-dev/unreleased/getting-started/creating-a-catalog/catalog-azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/getting-started/creating-a-catalog/catalog-azure/</guid><description>For the polaris catalogs create command there are few azure only options
--storage-type azure --tenant-id (Required for Azure) A tenant ID to use when connecting to Azure Storage --multi-tenant-app-name (Only for Azure) The app name to use when connecting to Azure Storage --consent-url (Only for Azure) A consent URL granting permissions for the Azure Storage location example CLIENT_ID=root \ CLIENT_SECRET=s3cr3t \ DEFAULT_BASE_LOCATION=abfss://tenant123@blob.core.windows.net \ TENANT_ID=tenant123.onmicrosoft.com \ MULTI_TENANT_APP_NAME=myapp \ CONSENT_URL=https://myapp.com/consent ./polaris \ --client-id ${CLIENT_ID} \ --client-secret ${CLIENT_SECRET} \ catalogs \ create \ --storage-type azure \ --tenant-id ${TENANT_ID} \ --multi-tenant-app-name ${MULTI_TENANT_APP_NAME} \ --consent-url ${CONSENT_URL} \ --default-base-location ${DEFAULT_BASE_LOCATION} \ my_azure_catalog</description></item><item><title>Command Line Interface</title><link>https://polaris.apache.org/in-dev/unreleased/command-line-interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/command-line-interface/</guid><description>In order to help administrators quickly set up and manage their Polaris server, Polaris provides a simple command-line interface (CLI) for common tasks.
The basic syntax of the Polaris CLI is outlined below:
polaris [options] COMMAND ... options: --host --port --base-url --client-id --client-secret --access-token --realm --header --profile --proxy COMMAND must be one of the following:
catalogs principals principal-roles catalog-roles namespaces privileges profiles policies repair Each command supports several subcommands, and some subcommands have actions that come after the subcommand in turn.</description></item><item><title>Apache Polaris (Incubating) CLI</title><link>https://polaris.apache.org/releases/0.9.0/command-line-interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/0.9.0/command-line-interface/</guid><description>In order to help administrators quickly set up and manage their Polaris server, Polaris provides a simple command-line interface (CLI) for common tasks.
The basic syntax of the Polaris CLI is outlined below:
polaris [options] COMMAND ... options: --host --port --client-id --client-secret COMMAND must be one of the following:
catalogs principals principal-roles catalog-roles namespaces privileges Each command supports several subcommands, and some subcommands have actions that come after the subcommand in turn.</description></item><item><title>Command Line Interface</title><link>https://polaris.apache.org/releases/1.0.0/command-line-interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/command-line-interface/</guid><description>In order to help administrators quickly set up and manage their Polaris server, Polaris provides a simple command-line interface (CLI) for common tasks.
The basic syntax of the Polaris CLI is outlined below:
polaris [options] COMMAND ... options: --host --port --base-url --client-id --client-secret --access-token --profile COMMAND must be one of the following:
catalogs principals principal-roles catalog-roles namespaces privileges profiles Each command supports several subcommands, and some subcommands have actions that come after the subcommand in turn.</description></item><item><title>Command Line Interface</title><link>https://polaris.apache.org/releases/1.0.1/command-line-interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/command-line-interface/</guid><description>In order to help administrators quickly set up and manage their Polaris server, Polaris provides a simple command-line interface (CLI) for common tasks.
The basic syntax of the Polaris CLI is outlined below:
polaris [options] COMMAND ... options: --host --port --base-url --client-id --client-secret --access-token --profile COMMAND must be one of the following:
catalogs principals principal-roles catalog-roles namespaces privileges profiles Each command supports several subcommands, and some subcommands have actions that come after the subcommand in turn.</description></item><item><title>Command Line Interface</title><link>https://polaris.apache.org/releases/1.1.0/command-line-interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/command-line-interface/</guid><description>In order to help administrators quickly set up and manage their Polaris server, Polaris provides a simple command-line interface (CLI) for common tasks.
The basic syntax of the Polaris CLI is outlined below:
polaris [options] COMMAND ... options: --host --port --base-url --client-id --client-secret --access-token --profile COMMAND must be one of the following:
catalogs principals principal-roles catalog-roles namespaces privileges profiles repair Each command supports several subcommands, and some subcommands have actions that come after the subcommand in turn.</description></item><item><title>Authentification Development Details</title><link>https://polaris.apache.org/in-dev/unreleased/managing-security/external-idp/idp-dev-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/managing-security/external-idp/idp-dev-notes/</guid><description>Developer Architecture Notes Authentication Architecture Polaris separates authentication into two logical phases using Quarkus Security:
Credential extraction – parsing headers and tokens Credential authentication – validating identity and assigning roles Key Interfaces Authenticator: A core interface used to authenticate credentials and resolve principal and principal roles. Roles may be derived from OIDC claims or internal mappings.
InternalPolarisToken: Used in internal auth and inherits from PrincipalCredential.
The DefaultAuthenticator is used to implement realm-specific logic based on these abstractions.</description></item><item><title>Deploying Polaris on Amazon Web Services (AWS)</title><link>https://polaris.apache.org/in-dev/unreleased/getting-started/deploying-polaris/cloud-deploy/deploy-aws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/getting-started/deploying-polaris/cloud-deploy/deploy-aws/</guid><description>Build and launch Polaris using the AWS Startup Script at the location provided in the command below. This script will start an Amazon RDS for PostgreSQL instance, which will be used as the backend Postgres instance holding all Polaris data. Additionally, Polaris will be bootstrapped to use this database and Docker containers will be spun up for Spark SQL and Trino.
The requirements to run the script below are:
There must be at least two subnets created in the VPC and region in which your EC2 instance reside.</description></item><item><title>Deploying Polaris on Amazon Web Services (AWS)</title><link>https://polaris.apache.org/releases/1.0.0/getting-started/deploying-polaris/quickstart-deploy-aws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/getting-started/deploying-polaris/quickstart-deploy-aws/</guid><description>Build and launch Polaris using the AWS Startup Script at the location provided in the command below. This script will start an Amazon RDS for PostgreSQL instance, which will be used as the backend Postgres instance holding all Polaris data. Additionally, Polaris will be bootstrapped to use this database and Docker containers will be spun up for Spark SQL and Trino.
The requirements to run the script below are:
There must be at least two subnets created in the VPC and region in which your EC2 instance reside.</description></item><item><title>Deploying Polaris on Amazon Web Services (AWS)</title><link>https://polaris.apache.org/releases/1.0.1/getting-started/deploying-polaris/quickstart-deploy-aws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/getting-started/deploying-polaris/quickstart-deploy-aws/</guid><description>Build and launch Polaris using the AWS Startup Script at the location provided in the command below. This script will start an Amazon RDS for PostgreSQL instance, which will be used as the backend Postgres instance holding all Polaris data. Additionally, Polaris will be bootstrapped to use this database and Docker containers will be spun up for Spark SQL and Trino.
The requirements to run the script below are:
There must be at least two subnets created in the VPC and region in which your EC2 instance reside.</description></item><item><title>Deploying Polaris on Amazon Web Services (AWS)</title><link>https://polaris.apache.org/releases/1.1.0/getting-started/deploying-polaris/quickstart-deploy-aws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/getting-started/deploying-polaris/quickstart-deploy-aws/</guid><description>Build and launch Polaris using the AWS Startup Script at the location provided in the command below. This script will start an Amazon RDS for PostgreSQL instance, which will be used as the backend Postgres instance holding all Polaris data. Additionally, Polaris will be bootstrapped to use this database and Docker containers will be spun up for Spark SQL and Trino.
The requirements to run the script below are:
There must be at least two subnets created in the VPC and region in which your EC2 instance reside.</description></item><item><title>Deploying Polaris on Azure</title><link>https://polaris.apache.org/in-dev/unreleased/getting-started/deploying-polaris/cloud-deploy/deploy-azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/getting-started/deploying-polaris/cloud-deploy/deploy-azure/</guid><description>Build and launch Polaris using the Azure Startup Script at the location provided in the command below. This script will start an Azure Database for PostgreSQL - Flexible Server instance, which will be used as the backend Postgres instance holding all Polaris data. Additionally, Polaris will be bootstrapped to use this database and Docker containers will be spun up for Spark SQL and Trino.
The requirements to run the script below are:</description></item><item><title>Deploying Polaris on Azure</title><link>https://polaris.apache.org/releases/1.0.0/getting-started/deploying-polaris/quickstart-deploy-azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/getting-started/deploying-polaris/quickstart-deploy-azure/</guid><description>Build and launch Polaris using the AWS Startup Script at the location provided in the command below. This script will start an Azure Database for PostgreSQL - Flexible Server instance, which will be used as the backend Postgres instance holding all Polaris data. Additionally, Polaris will be bootstrapped to use this database and Docker containers will be spun up for Spark SQL and Trino.
The requirements to run the script below are:</description></item><item><title>Deploying Polaris on Azure</title><link>https://polaris.apache.org/releases/1.0.1/getting-started/deploying-polaris/quickstart-deploy-azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/getting-started/deploying-polaris/quickstart-deploy-azure/</guid><description>Build and launch Polaris using the AWS Startup Script at the location provided in the command below. This script will start an Azure Database for PostgreSQL - Flexible Server instance, which will be used as the backend Postgres instance holding all Polaris data. Additionally, Polaris will be bootstrapped to use this database and Docker containers will be spun up for Spark SQL and Trino.
The requirements to run the script below are:</description></item><item><title>Deploying Polaris on Azure</title><link>https://polaris.apache.org/releases/1.1.0/getting-started/deploying-polaris/quickstart-deploy-azure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/getting-started/deploying-polaris/quickstart-deploy-azure/</guid><description>Build and launch Polaris using the AWS Startup Script at the location provided in the command below. This script will start an Azure Database for PostgreSQL - Flexible Server instance, which will be used as the backend Postgres instance holding all Polaris data. Additionally, Polaris will be bootstrapped to use this database and Docker containers will be spun up for Spark SQL and Trino.
The requirements to run the script below are:</description></item><item><title>Deploying Polaris on Google Cloud Platform (GCP)</title><link>https://polaris.apache.org/releases/1.0.0/getting-started/deploying-polaris/quickstart-deploy-gcp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/getting-started/deploying-polaris/quickstart-deploy-gcp/</guid><description>Build and launch Polaris using the AWS Startup Script at the location provided in the command below. This script will start a Cloud SQL for PostgreSQL instance, which will be used as the backend Postgres instance holding all Polaris data. Additionally, Polaris will be bootstrapped to use this database and Docker containers will be spun up for Spark SQL and Trino.
The requirements to run the script below are:
Install the gcloud CLI, if it is not already installed on the GCP VM.</description></item><item><title>Deploying Polaris on Google Cloud Platform (GCP)</title><link>https://polaris.apache.org/releases/1.0.1/getting-started/deploying-polaris/quickstart-deploy-gcp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/getting-started/deploying-polaris/quickstart-deploy-gcp/</guid><description>Build and launch Polaris using the AWS Startup Script at the location provided in the command below. This script will start a Cloud SQL for PostgreSQL instance, which will be used as the backend Postgres instance holding all Polaris data. Additionally, Polaris will be bootstrapped to use this database and Docker containers will be spun up for Spark SQL and Trino.
The requirements to run the script below are:
Install the gcloud CLI, if it is not already installed on the GCP VM.</description></item><item><title>Deploying Polaris on Google Cloud Platform (GCP)</title><link>https://polaris.apache.org/releases/1.1.0/getting-started/deploying-polaris/quickstart-deploy-gcp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/getting-started/deploying-polaris/quickstart-deploy-gcp/</guid><description>Build and launch Polaris using the AWS Startup Script at the location provided in the command below. This script will start a Cloud SQL for PostgreSQL instance, which will be used as the backend Postgres instance holding all Polaris data. Additionally, Polaris will be bootstrapped to use this database and Docker containers will be spun up for Spark SQL and Trino.
The requirements to run the script below are:
Install the gcloud CLI, if it is not already installed on the GCP VM.</description></item><item><title>Deploying Polaris on Google Cloud Platform (GCP)</title><link>https://polaris.apache.org/in-dev/unreleased/getting-started/deploying-polaris/cloud-deploy/deploy-gcp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/getting-started/deploying-polaris/cloud-deploy/deploy-gcp/</guid><description>Build and launch Polaris using the GCP Startup Script at the location provided in the command below. This script will start a Cloud SQL for PostgreSQL instance, which will be used as the backend Postgres instance holding all Polaris data. Additionally, Polaris will be bootstrapped to use this database and Docker containers will be spun up for Spark SQL and Trino.
The requirements to run the script below are:
Install the gcloud CLI, if it is not already installed on the GCP VM.</description></item><item><title>Deploying Polaris on MinIO</title><link>https://polaris.apache.org/releases/1.1.0/getting-started/minio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/getting-started/minio/</guid><description>In this guide we walk through setting up a simple Polaris Server with local MinIO storage.
Similar configurations are expected to work with other S3-compatible systems that also have the STS API.
Setup Clone the Polaris source repository, then build a docker image for Polaris.
./gradlew :polaris-server:assemble -Dquarkus.container-image.build=true Start MinIO with Polaris using the docker compose example.
docker compose -f getting-started/minio/docker-compose.yml up The compose script will start MinIO on default ports (API on 9000, UI on 9001) plus a Polaris Server pre-configured to that MinIO instance.</description></item><item><title>Realm</title><link>https://polaris.apache.org/in-dev/unreleased/realm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/realm/</guid><description>This page explains what a realm is and what it is used for in Polaris.
What is it? A realm in Polaris serves as logical partitioning mechanism within the catalog system. This isolation allows for multitenancy, enabling different teams, environments or organizations to operate independently within the same Polaris deployment.
Key Characteristics Isolation: Each realm encapsulates its own set of resources, ensuring that operations, policies in one realm do not affect others.</description></item><item><title>Realm</title><link>https://polaris.apache.org/releases/1.0.0/realm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/realm/</guid><description>This page explains what a realm is and what it is used for in Polaris.
What is it? A realm in Polaris serves as logical partitioning mechanism within the catalog system. This isolation allows for multitenancy, enabling different teams, environments or organizations to operate independently within the same Polaris deployment.
Key Characteristics Isolation: Each realm encapsulates its own set of resources, ensuring that operations, policies in one realm do not affect others.</description></item><item><title>Realm</title><link>https://polaris.apache.org/releases/1.0.1/realm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/realm/</guid><description>This page explains what a realm is and what it is used for in Polaris.
What is it? A realm in Polaris serves as logical partitioning mechanism within the catalog system. This isolation allows for multitenancy, enabling different teams, environments or organizations to operate independently within the same Polaris deployment.
Key Characteristics Isolation: Each realm encapsulates its own set of resources, ensuring that operations, policies in one realm do not affect others.</description></item><item><title>Realm</title><link>https://polaris.apache.org/releases/1.1.0/realm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/realm/</guid><description>This page explains what a realm is and what it is used for in Polaris.
What is it? A realm in Polaris serves as logical partitioning mechanism within the catalog system. This isolation allows for multitenancy, enabling different teams, environments or organizations to operate independently within the same Polaris deployment.
Key Characteristics Isolation: Each realm encapsulates its own set of resources, ensuring that operations, policies in one realm do not affect others.</description></item><item><title/><link>https://polaris.apache.org/community/chat-bylaws/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/community/chat-bylaws/</guid><description>Apache Polaris - Project Chat Bylaws Apache Polaris is currently undergoing Incubation at the Apache Software Foundation.
Motivation Apache Polaris uses public Slack workspace (join here).
A few rules shall ensure that the chat conforms to the rules and best practices of the Apache Software Foundation and serves well as a collaboration tool for the project.
Organizations and other open-source projects that contribute continuously and significantly to Polaris are welcome, but shall not use the Polaris chat as a vehicle for their own marketing without explicit approval of the project (P)PMC.</description></item><item><title>Entities</title><link>https://polaris.apache.org/in-dev/unreleased/entities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/entities/</guid><description>This page documents various entities that can be managed in Apache Polaris (Incubating).
Catalog A catalog is a top-level entity in Polaris that may contain other entities like namespaces and tables. These map directly to Apache Iceberg catalogs.
For information on managing catalogs with the REST API or for more information on what data can be associated with a catalog, see the CreateCatalogRequest OpenAPI.
Storage Type All catalogs in Polaris are associated with a storage type.</description></item><item><title>Entities</title><link>https://polaris.apache.org/releases/0.9.0/entities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/0.9.0/entities/</guid><description>This page documents various entities that can be managed in Apache Polaris (Incubating).
Catalog A catalog is a top-level entity in Polaris that may contain other entities like namespaces and tables. These map directly to Apache Iceberg catalogs.
For information on managing catalogs with the REST API or for more information on what data can be associated with a catalog, see the API docs.
Storage Type All catalogs in Polaris are associated with a storage type.</description></item><item><title>Entities</title><link>https://polaris.apache.org/releases/1.0.0/entities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/entities/</guid><description>This page documents various entities that can be managed in Apache Polaris (Incubating).
Catalog A catalog is a top-level entity in Polaris that may contain other entities like namespaces and tables. These map directly to Apache Iceberg catalogs.
For information on managing catalogs with the REST API or for more information on what data can be associated with a catalog, see the API docs.
Storage Type All catalogs in Polaris are associated with a storage type.</description></item><item><title>Entities</title><link>https://polaris.apache.org/releases/1.0.1/entities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/entities/</guid><description>This page documents various entities that can be managed in Apache Polaris (Incubating).
Catalog A catalog is a top-level entity in Polaris that may contain other entities like namespaces and tables. These map directly to Apache Iceberg catalogs.
For information on managing catalogs with the REST API or for more information on what data can be associated with a catalog, see the API docs.
Storage Type All catalogs in Polaris are associated with a storage type.</description></item><item><title>Entities</title><link>https://polaris.apache.org/releases/1.1.0/entities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/entities/</guid><description>This page documents various entities that can be managed in Apache Polaris (Incubating).
Catalog A catalog is a top-level entity in Polaris that may contain other entities like namespaces and tables. These map directly to Apache Iceberg catalogs.
For information on managing catalogs with the REST API or for more information on what data can be associated with a catalog, see the CreateCatalogRequest OpenAPI.
Storage Type All catalogs in Polaris are associated with a storage type.</description></item><item><title>Getting Started with Apache Polaris, External Authentication and Keycloak</title><link>https://polaris.apache.org/in-dev/unreleased/getting-started/using-polaris/keycloak-idp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/getting-started/using-polaris/keycloak-idp/</guid><description>Overview This example uses Keycloak as an external identity provider for Polaris. The &amp;ldquo;iceberg&amp;rdquo; realm is automatically created and configured from the iceberg-realm.json file.
This Keycloak realm contains 1 client definition: client1:s3cr3t. It is configured to return tokens with the following fixed claims:
principal_id: the principal ID of the user. It is always set to zero (0) in this example. principal_name: the principal name of the user. It is always set to &amp;ldquo;root&amp;rdquo; in this example.</description></item><item><title>Using Polaris</title><link>https://polaris.apache.org/releases/1.0.0/getting-started/using-polaris/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/getting-started/using-polaris/</guid><description>Setup Ensure your CLIENT_ID &amp;amp; CLIENT_SECRET variables are already defined, as they were required for starting the Polaris server earlier.
export CLIENT_ID=YOUR_CLIENT_ID export CLIENT_SECRET=YOUR_CLIENT_SECRET Defining a Catalog In Polaris, the catalog is the top-level entity that objects like tables and views are organized under. With a Polaris service running, you can create a catalog like so:
cd ~/polaris ./polaris \ --client-id ${CLIENT_ID} \ --client-secret ${CLIENT_SECRET} \ catalogs \ create \ --storage-type s3 \ --default-base-location ${DEFAULT_BASE_LOCATION} \ --role-arn ${ROLE_ARN} \ quickstart_catalog This will create a new catalog called quickstart_catalog.</description></item><item><title>Using Polaris</title><link>https://polaris.apache.org/releases/1.0.1/getting-started/using-polaris/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/getting-started/using-polaris/</guid><description>Setup Ensure your CLIENT_ID &amp;amp; CLIENT_SECRET variables are already defined, as they were required for starting the Polaris server earlier.
export CLIENT_ID=YOUR_CLIENT_ID export CLIENT_SECRET=YOUR_CLIENT_SECRET Defining a Catalog In Polaris, the catalog is the top-level entity that objects like tables and views are organized under. With a Polaris service running, you can create a catalog like so:
cd ~/polaris ./polaris \ --client-id ${CLIENT_ID} \ --client-secret ${CLIENT_SECRET} \ catalogs \ create \ --storage-type s3 \ --default-base-location ${DEFAULT_BASE_LOCATION} \ --role-arn ${ROLE_ARN} \ quickstart_catalog This will create a new catalog called quickstart_catalog.</description></item><item><title>Using Polaris</title><link>https://polaris.apache.org/releases/1.1.0/getting-started/using-polaris/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/getting-started/using-polaris/</guid><description>Setup Ensure your CLIENT_ID &amp;amp; CLIENT_SECRET variables are already defined, as they were required for starting the Polaris server earlier.
export CLIENT_ID=YOUR_CLIENT_ID export CLIENT_SECRET=YOUR_CLIENT_SECRET Defining a Catalog In Polaris, the catalog is the top-level entity that objects like tables and views are organized under. With a Polaris service running, you can create a catalog like so:
cd ~/polaris ./polaris \ --client-id ${CLIENT_ID} \ --client-secret ${CLIENT_SECRET} \ catalogs \ create \ --storage-type s3 \ --default-base-location ${DEFAULT_BASE_LOCATION} \ --role-arn ${ROLE_ARN} \ quickstart_catalog This will create a new catalog called quickstart_catalog.</description></item><item><title>Getting Started with Apache Polaris, Prometheus and Jaeger</title><link>https://polaris.apache.org/in-dev/unreleased/getting-started/using-polaris/telemetry-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/getting-started/using-polaris/telemetry-tools/</guid><description>This example requires jq to be installed on your machine.
Build the Polaris image if it&amp;rsquo;s not already present locally:
./gradlew \ :polaris-server:assemble \ :polaris-server:quarkusAppPartsBuild --rerun \ -Dquarkus.container-image.build=true Start the docker compose group by running the following command from the root of the repository:
export ASSETS_PATH=$(pwd)/getting-started/assets/ export CLIENT_ID=root export CLIENT_SECRET=s3cr3t docker compose -f getting-started/telemetry/docker-compose.yml up To access Polaris from the host machine, first request an access token:
export POLARIS_TOKEN=$(curl -s http://localhost:8181/api/catalog/v1/oauth/tokens \ --user root:s3cr3t \ -d &amp;#39;grant_type=client_credentials&amp;#39; \ -d &amp;#39;scope=PRINCIPAL_ROLE:ALL&amp;#39; | jq -r .</description></item><item><title>Policy</title><link>https://polaris.apache.org/in-dev/unreleased/policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/policy/</guid><description>The Polaris Policy framework empowers organizations to centrally define, manage, and enforce fine-grained governance, lifecycle, and operational rules across all data resources in the catalog.
With the policy API, you can:
Create and manage policies Attach policies to specific resources (catalogs, namespaces, tables, or views) Check applicable policies for any given resource What is a Policy? A policy in Apache Polaris is a structured entity that defines rules governing actions on specified resources under predefined conditions.</description></item><item><title>Policy</title><link>https://polaris.apache.org/releases/1.0.0/policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/policy/</guid><description>The Polaris Policy framework empowers organizations to centrally define, manage, and enforce fine-grained governance, lifecycle, and operational rules across all data resources in the catalog.
With the policy API, you can:
Create and manage policies Attach policies to specific resources (catalogs, namespaces, tables, or views) Check applicable policies for any given resource What is a Policy? A policy in Apache Polaris is a structured entity that defines rules governing actions on specified resources under predefined conditions.</description></item><item><title>Policy</title><link>https://polaris.apache.org/releases/1.0.1/policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/policy/</guid><description>The Polaris Policy framework empowers organizations to centrally define, manage, and enforce fine-grained governance, lifecycle, and operational rules across all data resources in the catalog.
With the policy API, you can:
Create and manage policies Attach policies to specific resources (catalogs, namespaces, tables, or views) Check applicable policies for any given resource What is a Policy? A policy in Apache Polaris is a structured entity that defines rules governing actions on specified resources under predefined conditions.</description></item><item><title>Policy</title><link>https://polaris.apache.org/releases/1.1.0/policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/policy/</guid><description>The Polaris Policy framework empowers organizations to centrally define, manage, and enforce fine-grained governance, lifecycle, and operational rules across all data resources in the catalog.
With the policy API, you can:
Create and manage policies Attach policies to specific resources (catalogs, namespaces, tables, or views) Check applicable policies for any given resource What is a Policy? A policy in Apache Polaris is a structured entity that defines rules governing actions on specified resources under predefined conditions.</description></item><item><title>Generic Table (Beta)</title><link>https://polaris.apache.org/in-dev/unreleased/generic-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/generic-table/</guid><description>The Generic Table in Apache Polaris is designed to provide support for non-Iceberg tables across different table formats includes delta, csv etc. It currently provides the following capabilities:
Create a generic table under a namespace Load a generic table Drop a generic table List all generic tables under a namespace NOTE The current generic table is in beta release. Please use it with caution and report any issue if encountered.</description></item><item><title>Generic Table (Beta)</title><link>https://polaris.apache.org/releases/1.0.0/generic-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/generic-table/</guid><description>The Generic Table in Apache Polaris is designed to provide support for non-Iceberg tables across different table formats includes delta, csv etc. It currently provides the following capabilities:
Create a generic table under a namespace Load a generic table Drop a generic table List all generic tables under a namespace NOTE The current generic table is in beta release. Please use it with caution and report any issue if encountered.</description></item><item><title>Generic Table (Beta)</title><link>https://polaris.apache.org/releases/1.0.1/generic-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/generic-table/</guid><description>The Generic Table in Apache Polaris is designed to provide support for non-Iceberg tables across different table formats includes delta, csv etc. It currently provides the following capabilities:
Create a generic table under a namespace Load a generic table Drop a generic table List all generic tables under a namespace NOTE The current generic table is in beta release. Please use it with caution and report any issue if encountered.</description></item><item><title>Generic Table (Beta)</title><link>https://polaris.apache.org/releases/1.1.0/generic-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/generic-table/</guid><description>The Generic Table in Apache Polaris is designed to provide support for non-Iceberg tables across different table formats includes delta, csv etc. It currently provides the following capabilities:
Create a generic table under a namespace Load a generic table Drop a generic table List all generic tables under a namespace NOTE The current generic table is in beta release. Please use it with caution and report any issue if encountered.</description></item><item><title>Telemetry</title><link>https://polaris.apache.org/in-dev/unreleased/telemetry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/telemetry/</guid><description>Metrics Metrics are published using Micrometer; they are available from Polaris&amp;rsquo;s management interface (port 8282 by default) under the path /q/metrics. For example, if the server is running on localhost, the metrics can be accessed via http://localhost:8282/q/metrics.
Metrics can be scraped by Prometheus or any compatible metrics scraping server. See: Prometheus for more information.
Additional tags can be added to the metrics by setting the polaris.metrics.tags.* property. Each tag is a key-value pair, where the key is the tag name and the value is the tag value.</description></item><item><title>Telemetry</title><link>https://polaris.apache.org/releases/1.0.0/telemetry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/telemetry/</guid><description>Metrics Metrics are published using Micrometer; they are available from Polaris&amp;rsquo;s management interface (port 8282 by default) under the path /q/metrics. For example, if the server is running on localhost, the metrics can be accessed via http://localhost:8282/q/metrics.
Metrics can be scraped by Prometheus or any compatible metrics scraping server. See: Prometheus for more information.
Additional tags can be added to the metrics by setting the polaris.metrics.tags.* property. Each tag is a key-value pair, where the key is the tag name and the value is the tag value.</description></item><item><title>Telemetry</title><link>https://polaris.apache.org/releases/1.0.1/telemetry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/telemetry/</guid><description>Metrics Metrics are published using Micrometer; they are available from Polaris&amp;rsquo;s management interface (port 8282 by default) under the path /q/metrics. For example, if the server is running on localhost, the metrics can be accessed via http://localhost:8282/q/metrics.
Metrics can be scraped by Prometheus or any compatible metrics scraping server. See: Prometheus for more information.
Additional tags can be added to the metrics by setting the polaris.metrics.tags.* property. Each tag is a key-value pair, where the key is the tag name and the value is the tag value.</description></item><item><title>Telemetry</title><link>https://polaris.apache.org/releases/1.1.0/telemetry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/telemetry/</guid><description>Metrics Metrics are published using Micrometer; they are available from Polaris&amp;rsquo;s management interface (port 8282 by default) under the path /q/metrics. For example, if the server is running on localhost, the metrics can be accessed via http://localhost:8282/q/metrics.
Metrics can be scraped by Prometheus or any compatible metrics scraping server. See: Prometheus for more information.
Additional tags can be added to the metrics by setting the polaris.metrics.tags.* property. Each tag is a key-value pair, where the key is the tag name and the value is the tag value.</description></item><item><title>Access Control</title><link>https://polaris.apache.org/releases/0.9.0/access-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/0.9.0/access-control/</guid><description>This section provides information about how access control works for Apache Polaris (Incubating).
Polaris uses a role-based access control (RBAC) model in which the Polaris administrator assigns access privileges to catalog roles and then grants access to resources to service principals by assigning catalog roles to principal roles.
These are the key concepts to understanding access control in Polaris:
Securable object Principal role Catalog role Privilege Securable object A securable object is an object to which access can be granted.</description></item><item><title>Access Control</title><link>https://polaris.apache.org/releases/1.0.0/access-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/access-control/</guid><description>This section provides information about how access control works for Apache Polaris (Incubating).
Polaris uses a role-based access control (RBAC) model in which the Polaris administrator assigns access privileges to catalog roles and then grants access to resources to service principals by assigning catalog roles to principal roles.
These are the key concepts to understanding access control in Polaris:
Securable object Principal role Catalog role Privilege Securable object A securable object is an object to which access can be granted.</description></item><item><title>Access Control</title><link>https://polaris.apache.org/releases/1.0.1/access-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/access-control/</guid><description>This section provides information about how access control works for Apache Polaris (Incubating).
Polaris uses a role-based access control (RBAC) model in which the Polaris administrator assigns access privileges to catalog roles and then grants access to resources to service principals by assigning catalog roles to principal roles.
These are the key concepts to understanding access control in Polaris:
Securable object Principal role Catalog role Privilege Securable object A securable object is an object to which access can be granted.</description></item><item><title>Access Control</title><link>https://polaris.apache.org/releases/1.1.0/access-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/access-control/</guid><description>This section provides information about how access control works for Apache Polaris (Incubating).
Polaris uses a role-based access control (RBAC) model in which the Polaris administrator assigns access privileges to catalog roles and then grants access to resources to principals by assigning catalog roles to principal roles.
These are the key concepts to understanding access control in Polaris:
Securable object Principal role Catalog role Privilege Securable object A securable object is an object to which access can be granted.</description></item><item><title/><link>https://polaris.apache.org/community/community-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/community/community-guidelines/</guid><description>Community Guidelines We value and appreciate the diverse contributions and ideas from the community. To maintain a welcoming and inclusive environment, we kindly ask you to adhere to the following guidelines:
Be respectful and considerate of other community members. Treat everyone with respect and professionalism. Refrain from engaging in offensive, discriminatory, or harassing behavior. Be patient and understanding towards others, especially newcomers who may be learning. Stay constructive and provide helpful feedback.</description></item><item><title/><link>https://polaris.apache.org/community/contributing-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/community/contributing-guidelines/</guid><description>Contributing to Apache Polaris Thank you for considering contributing to Apache Polaris. Any contribution (code, test cases, documentation, use cases, &amp;hellip;) is valuable!
This documentation will help you get started.
Contribute bug reports and feature requests You can report an issue in the Polaris Catalog issue tracker.
How to report a bug Note: If you find a security vulnerability, do NOT open an issue. Please email security@apache.org instead.
When filing an issue, make sure to answer these five questions:</description></item><item><title/><link>https://polaris.apache.org/community/release-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/community/release-guide/</guid><description>Release Guide This guide walks you through the release process of the Apache Polaris podling.
Setup To create a release candidate, you will need:
your Apache credentials (for repository.apache.org and dist.apache.org repositories) a GPG key for signing artifacts, published in KEYS file Publish your GPG key If you haven&amp;rsquo;t published your GPG key yet, you must publish it before starting the release process:
svn checkout https://dist.apache.org/repos/dist/release/incubator/polaris polaris-dist-release cd polaris-dist-release echo &amp;#34;&amp;#34; &amp;gt;&amp;gt; KEYS # append a new line gpg --list-sigs &amp;lt;YOUR KEY ID HERE&amp;gt; &amp;gt;&amp;gt; KEYS # append signatures gpg --armor --export &amp;lt;YOUR KEY ID HERE&amp;gt; &amp;gt;&amp;gt; KEYS # append public key block svn commit -m &amp;#34;add key for &amp;lt;YOUR NAME HERE&amp;gt;&amp;#34; To send the key to the Ubuntu key-server, Apache Nexus needs it to validate published artifacts:</description></item><item><title/><link>https://polaris.apache.org/community/security-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/community/security-report/</guid><description>Security Report Adhering to the specifications of The ASF, the Apache Polaris community maintains a highly proactive and open attitude towards addressing security issues.
We strongly recommend that users first report such issues on the security@apache.org and private@polaris.apache.org, using the procedure details on The ASF Security page.
Please note that the security@apache.org and private@polaris.apache.org mailing lists are reserved for reporting undisclosed security vulnerabilities and following the vulnerability resolution process. Regular issue reports should be directed to GitHub Issue or the dev@polaris.</description></item><item><title>Configuring Polaris</title><link>https://polaris.apache.org/in-dev/unreleased/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/configuration/</guid><description>Overview This page provides information on how to configure Apache Polaris (Incubating). Unless stated otherwise, this information is valid both for Polaris Docker images (and Kubernetes deployments) as well as for Polaris binary distributions.
📝 Note
For Production tips and best practices, refer to Configuring Polaris for Production. First off, Polaris server runs on Quarkus, and uses its configuration mechanisms. Read Quarkus configuration guide to get familiar with the basics.</description></item><item><title>Configuring Polaris</title><link>https://polaris.apache.org/releases/1.0.0/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/configuration/</guid><description>Overview This page provides information on how to configure Apache Polaris (Incubating). Unless stated otherwise, this information is valid both for Polaris Docker images (and Kubernetes deployments) as well as for Polaris binary distributions.
Note: for Production tips and best practices, refer to Configuring Polaris for Production.
First off, Polaris server runs on Quarkus, and uses its configuration mechanisms. Read Quarkus configuration guide to get familiar with the basics.
Quarkus aggregates configuration properties from multiple sources, applying them in a specific order of precedence.</description></item><item><title>Configuring Polaris</title><link>https://polaris.apache.org/releases/1.0.1/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/configuration/</guid><description>Overview This page provides information on how to configure Apache Polaris (Incubating). Unless stated otherwise, this information is valid both for Polaris Docker images (and Kubernetes deployments) as well as for Polaris binary distributions.
Note: for Production tips and best practices, refer to Configuring Polaris for Production.
First off, Polaris server runs on Quarkus, and uses its configuration mechanisms. Read Quarkus configuration guide to get familiar with the basics.
Quarkus aggregates configuration properties from multiple sources, applying them in a specific order of precedence.</description></item><item><title>Configuring Polaris</title><link>https://polaris.apache.org/releases/1.1.0/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/configuration/</guid><description>Overview This page provides information on how to configure Apache Polaris (Incubating). Unless stated otherwise, this information is valid both for Polaris Docker images (and Kubernetes deployments) as well as for Polaris binary distributions.
[!NOTE] For Production tips and best practices, refer to Configuring Polaris for Production.
First off, Polaris server runs on Quarkus, and uses its configuration mechanisms. Read Quarkus configuration guide to get familiar with the basics.
Quarkus aggregates configuration properties from multiple sources, applying them in a specific order of precedence.</description></item><item><title>External Identity Providers</title><link>https://polaris.apache.org/releases/1.1.0/external-idp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/external-idp/</guid><description>Apache Polaris supports authentication via external identity providers (IdPs) using OpenID Connect (OIDC) in addition to the internal authentication system. This feature enables flexible identity federation with enterprise IdPs and allows gradual migration or hybrid authentication strategies across realms in Polaris.
Authentication Types Polaris supports three authentication modes:
internal (Default) Only Polaris internal authentication is used. external Authenticates using external OIDC providers (via Quarkus OIDC). Disables the internal token endpoint (returns HTTP 501).</description></item><item><title>Configuring Apache Polaris (Incubating) for Production</title><link>https://polaris.apache.org/releases/0.9.0/configuring-polaris-for-production/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/0.9.0/configuring-polaris-for-production/</guid><description>The default polaris-server.yml configuration is intended for development and testing. When deploying Polaris in production, there are several best practices to keep in mind.
Security Configurations Notable configuration used to secure a Polaris deployment are outlined below.
oauth2 [!WARNING]
Ensure that the tokenBroker setting reflects the token broker specified in authenticator below.
Configure OAuth with this setting. Remove the TestInlineBearerTokenPolarisAuthenticator option and uncomment the DefaultPolarisAuthenticator authenticator option beneath it. Then, configure the token broker.</description></item><item><title>Configuring Polaris for Production</title><link>https://polaris.apache.org/in-dev/unreleased/configuring-polaris-for-production/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/configuring-polaris-for-production/</guid><description>The default server configuration is intended for development and testing. When you deploy Polaris in production, review and apply the following checklist:
Configure OAuth2 keys Enforce realm header validation (require-header=true) Use a durable metastore (JDBC + PostgreSQL) Bootstrap valid realms in the metastore Disable local FILE storage Configure OAuth2 Polaris authentication requires specifying a token broker factory type. Two implementations are supported out of the box:
rsa-key-pair uses a pair of public and private keys; symmetric-key uses a shared secret.</description></item><item><title>Configuring Polaris for Production</title><link>https://polaris.apache.org/releases/1.0.0/configuring-polaris-for-production/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/configuring-polaris-for-production/</guid><description>The default server configuration is intended for development and testing. When you deploy Polaris in production, review and apply the following checklist:
Configure OAuth2 keys Enforce realm header validation (require-header=true) Use a durable metastore (JDBC + PostgreSQL) Bootstrap valid realms in the metastore Disable local FILE storage Configure OAuth2 Polaris authentication requires specifying a token broker factory type. Two implementations are supported out of the box:
rsa-key-pair uses a pair of public and private keys; symmetric-key uses a shared secret.</description></item><item><title>Configuring Polaris for Production</title><link>https://polaris.apache.org/releases/1.0.1/configuring-polaris-for-production/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/configuring-polaris-for-production/</guid><description>The default server configuration is intended for development and testing. When you deploy Polaris in production, review and apply the following checklist:
Configure OAuth2 keys Enforce realm header validation (require-header=true) Use a durable metastore (JDBC + PostgreSQL) Bootstrap valid realms in the metastore Disable local FILE storage Configure OAuth2 Polaris authentication requires specifying a token broker factory type. Two implementations are supported out of the box:
rsa-key-pair uses a pair of public and private keys; symmetric-key uses a shared secret.</description></item><item><title>Configuring Polaris for Production</title><link>https://polaris.apache.org/releases/1.1.0/configuring-polaris-for-production/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/configuring-polaris-for-production/</guid><description>The default server configuration is intended for development and testing. When you deploy Polaris in production, review and apply the following checklist:
Configure OAuth2 keys Enforce realm header validation (require-header=true) Use a durable metastore (JDBC + PostgreSQL) Bootstrap valid realms in the metastore Disable local FILE storage Configure OAuth2 Polaris authentication requires specifying a token broker factory type. Two implementations are supported out of the box:
rsa-key-pair uses a pair of public and private keys; symmetric-key uses a shared secret.</description></item><item><title>Polaris Spark Client</title><link>https://polaris.apache.org/in-dev/unreleased/polaris-spark-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/polaris-spark-client/</guid><description>Apache Polaris now provides Catalog support for Generic Tables (non-Iceberg tables), please check out the Polaris Catalog OpenAPI Spec for Generic Table API specs.
Along with the Generic Table Catalog support, Polaris is also releasing a Spark client, which helps to provide an end-to-end solution for Apache Spark to manage Delta tables using Polaris.
Note the Polaris Spark client is able to handle both Iceberg and Delta tables, not just Delta.</description></item><item><title>Polaris Spark Client</title><link>https://polaris.apache.org/releases/1.0.0/polaris-spark-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/polaris-spark-client/</guid><description>Apache Polaris now provides Catalog support for Generic Tables (non-Iceberg tables), please check out the Catalog API Spec for Generic Table API specs.
Along with the Generic Table Catalog support, Polaris is also releasing a Spark client, which helps to provide an end-to-end solution for Apache Spark to manage Delta tables using Polaris.
Note the Polaris Spark client is able to handle both Iceberg and Delta tables, not just Delta.</description></item><item><title>Polaris Spark Client</title><link>https://polaris.apache.org/releases/1.0.1/polaris-spark-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/polaris-spark-client/</guid><description>Apache Polaris now provides Catalog support for Generic Tables (non-Iceberg tables), please check out the Catalog API Spec for Generic Table API specs.
Along with the Generic Table Catalog support, Polaris is also releasing a Spark client, which helps to provide an end-to-end solution for Apache Spark to manage Delta tables using Polaris.
Note the Polaris Spark client is able to handle both Iceberg and Delta tables, not just Delta.</description></item><item><title>Polaris Spark Client</title><link>https://polaris.apache.org/releases/1.1.0/polaris-spark-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/polaris-spark-client/</guid><description>Apache Polaris now provides Catalog support for Generic Tables (non-Iceberg tables), please check out the Catalog API Spec for Generic Table API specs.
Along with the Generic Table Catalog support, Polaris is also releasing a Spark client, which helps to provide an end-to-end solution for Apache Spark to manage Delta tables using Polaris.
Note the Polaris Spark client is able to handle both Iceberg and Delta tables, not just Delta.</description></item><item><title>Polaris Helm Chart</title><link>https://polaris.apache.org/in-dev/unreleased/helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/helm/</guid><description>A Helm chart for Apache Polaris (incubating).
Homepage: https://polaris.apache.org/
Source Code https://github.com/apache/polaris Installation Running locally with a Minikube cluster The below instructions assume Minikube and Helm are installed.
Start the Minikube cluster, build and load image into the Minikube cluster:
minikube start eval $(minikube docker-env) ./gradlew \ :polaris-server:assemble \ :polaris-server:quarkusAppPartsBuild --rerun \ :polaris-admin:assemble \ :polaris-admin:quarkusAppPartsBuild --rerun \ -Dquarkus.container-image.build=true Installing the chart locally The below instructions assume a local Kubernetes cluster is running and Helm is installed.</description></item><item><title>Polaris Helm Chart</title><link>https://polaris.apache.org/releases/1.1.0/helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/helm/</guid><description>A Helm chart for Apache Polaris (incubating).
Homepage: https://polaris.apache.org/
Source Code https://github.com/apache/polaris Installation Running locally with a Minikube cluster The below instructions assume Minikube and Helm are installed.
Start the Minikube cluster, build and load image into the Minikube cluster:
minikube start eval $(minikube docker-env) ./gradlew \ :polaris-server:assemble \ :polaris-server:quarkusAppPartsBuild --rerun \ :polaris-admin:assemble \ :polaris-admin:quarkusAppPartsBuild --rerun \ -Dquarkus.container-image.build=true Installing the chart locally The below instructions assume a local Kubernetes cluster is running and Helm is installed.</description></item><item><title>Metastores</title><link>https://polaris.apache.org/in-dev/unreleased/metastores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/metastores/</guid><description>This page explains how to configure and use Polaris metastores with either the recommended Relational JDBC or the deprecated EclipseLink persistence backends.
Relational JDBC This implementation leverages Quarkus for datasource management and supports configuration through environment variables or JVM -D flags at startup. For more information, refer to the Quarkus configuration reference.
We have 2 options for configuring the persistence backend:
1. Relational JDBC metastore with username and password using environment variables:</description></item><item><title>Metastores</title><link>https://polaris.apache.org/releases/0.9.0/metastores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/0.9.0/metastores/</guid><description>This page documents important configurations for connecting to production database through EclipseLink.
Polaris Server Configuration Configure the metaStoreManager section in the Polaris configuration (polaris-server.yml by default) as follows:
metaStoreManager: type: eclipse-link conf-file: META-INF/persistence.xml persistence-unit: polaris conf-file must point to an EclipseLink configuration file
By default, conf-file points to the embedded resource file META-INF/persistence.xml in the polaris-eclipselink module.
In order to specify a configuration file outside the classpath, follow these steps.</description></item><item><title>Metastores</title><link>https://polaris.apache.org/releases/1.0.0/metastores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/metastores/</guid><description>This page explains how to configure and use Polaris metastores with either the recommended Relational JDBC or the deprecated EclipseLink persistence backends.
Relational JDBC This implementation leverages Quarkus for datasource management and supports configuration through environment variables or JVM -D flags at startup. For more information, refer to the Quarkus configuration reference.
POLARIS_PERSISTENCE_TYPE=relational-jdbc QUARKUS_DATASOURCE_DB_KIND=postgresql QUARKUS_DATASOURCE_USERNAME=&amp;lt;your-username&amp;gt; QUARKUS_DATASOURCE_PASSWORD=&amp;lt;your-password&amp;gt; QUARKUS_DATASOURCE_JDBC_URL=&amp;lt;jdbc-url-of-postgres&amp;gt; The Relational JDBC metastore currently relies on a Quarkus-managed datasource and supports only PostgresSQL and H2 databases.</description></item><item><title>Metastores</title><link>https://polaris.apache.org/releases/1.0.1/metastores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/metastores/</guid><description>This page explains how to configure and use Polaris metastores with either the recommended Relational JDBC or the deprecated EclipseLink persistence backends.
Relational JDBC This implementation leverages Quarkus for datasource management and supports configuration through environment variables or JVM -D flags at startup. For more information, refer to the Quarkus configuration reference.
POLARIS_PERSISTENCE_TYPE=relational-jdbc QUARKUS_DATASOURCE_DB_KIND=postgresql QUARKUS_DATASOURCE_USERNAME=&amp;lt;your-username&amp;gt; QUARKUS_DATASOURCE_PASSWORD=&amp;lt;your-password&amp;gt; QUARKUS_DATASOURCE_JDBC_URL=&amp;lt;jdbc-url-of-postgres&amp;gt; The Relational JDBC metastore currently relies on a Quarkus-managed datasource and supports only PostgresSQL and H2 databases.</description></item><item><title>Metastores</title><link>https://polaris.apache.org/releases/1.1.0/metastores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/metastores/</guid><description>This page explains how to configure and use Polaris metastores with either the recommended Relational JDBC or the deprecated EclipseLink persistence backends.
Relational JDBC This implementation leverages Quarkus for datasource management and supports configuration through environment variables or JVM -D flags at startup. For more information, refer to the Quarkus configuration reference.
POLARIS_PERSISTENCE_TYPE=relational-jdbc QUARKUS_DATASOURCE_USERNAME=&amp;lt;your-username&amp;gt; QUARKUS_DATASOURCE_PASSWORD=&amp;lt;your-password&amp;gt; QUARKUS_DATASOURCE_JDBC_URL=&amp;lt;jdbc-url-of-postgres&amp;gt; The Relational JDBC metastore currently relies on a Quarkus-managed datasource and supports only PostgresSQL and H2 databases.</description></item><item><title>Iceberg REST Federation</title><link>https://polaris.apache.org/in-dev/unreleased/federation/iceberg-rest-federation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/federation/iceberg-rest-federation/</guid><description>Polaris can federate an external Iceberg REST catalog (e.g., another Polaris deployment, AWS Glue, or a custom Iceberg REST implementation), enabling a Polaris service to access table and view entities managed by remote Iceberg REST Catalogs.
Runtime requirements REST endpoint: The remote service must expose the Iceberg REST specification. Configure firewalls so Polaris can reach the base URI you provide in the connection config. Authentication: Polaris forwards requests using the credentials defined in ConnectionConfigInfo.</description></item><item><title>Hive Metastore Federation</title><link>https://polaris.apache.org/in-dev/unreleased/federation/hive-metastore-federation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/federation/hive-metastore-federation/</guid><description>Polaris can federate catalog operations to an existing Hive Metastore (HMS). This lets an external HMS remain the source of truth for table metadata while Polaris brokers access, policies, and multi-engine connectivity.
Build-time enablement The Hive factory is packaged as an optional extension and is not baked into default server builds. Include it when assembling the runtime or container images by setting the NonRESTCatalogs Gradle property to include HIVE (and any other non-REST backends you need):</description></item><item><title>Apache Polaris Management Service OpenAPI</title><link>https://polaris.apache.org/releases/0.9.0/polaris-management-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/0.9.0/polaris-management-service/</guid><description/></item><item><title>Apache Polaris Management Service OpenAPI</title><link>https://polaris.apache.org/releases/1.0.0/polaris-management-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/polaris-management-service/</guid><description> Top</description></item><item><title>Apache Polaris Management Service OpenAPI</title><link>https://polaris.apache.org/releases/1.0.1/polaris-management-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/polaris-management-service/</guid><description> Top</description></item><item><title>Apache Polaris Management Service OpenAPI</title><link>https://polaris.apache.org/releases/1.1.0/polaris-management-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/polaris-management-service/</guid><description> Top</description></item><item><title/><link>https://polaris.apache.org/releases/1.0.0/polaris-catalog-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/polaris-catalog-service/</guid><description> Top</description></item><item><title/><link>https://polaris.apache.org/releases/1.0.1/polaris-catalog-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/polaris-catalog-service/</guid><description> Top</description></item><item><title/><link>https://polaris.apache.org/releases/1.1.0/polaris-catalog-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/polaris-catalog-service/</guid><description> Top</description></item><item><title>Apache Iceberg OpenAPI</title><link>https://polaris.apache.org/releases/0.9.0/rest-catalog-open-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/0.9.0/rest-catalog-open-api/</guid><description/></item><item><title>Polaris Evolution</title><link>https://polaris.apache.org/in-dev/unreleased/evolution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/evolution/</guid><description>This page discusses what can be expected from Apache Polaris as the project evolves.
Using Polaris as a Catalog Polaris is primarily intended to be used as a Catalog of Tables and Views. As such, it implements the Iceberg REST Catalog API and its own REST APIs.
Revisions of the Iceberg REST Catalog API are controlled by the Apache Iceberg community. Polaris attempts to accurately implement this specification. Nonetheless, optional REST Catalog features may or may not be supported immediately.</description></item><item><title>Polaris Evolution</title><link>https://polaris.apache.org/releases/1.0.0/evolution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.0/evolution/</guid><description>This page discusses what can be expected from Apache Polaris as the project evolves.
Using Polaris as a Catalog Polaris is primarily intended to be used as a Catalog of Tables and Views. As such, it implements the Iceberg REST Catalog API and its own REST APIs.
Revisions of the Iceberg REST Catalog API are controlled by the Apache Iceberg community. Polaris attempts to accurately implement this specification. Nonetheless, optional REST Catalog features may or may not be supported immediately.</description></item><item><title>Polaris Evolution</title><link>https://polaris.apache.org/releases/1.0.1/evolution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.0.1/evolution/</guid><description>This page discusses what can be expected from Apache Polaris as the project evolves.
Using Polaris as a Catalog Polaris is primarily intended to be used as a Catalog of Tables and Views. As such, it implements the Iceberg REST Catalog API and its own REST APIs.
Revisions of the Iceberg REST Catalog API are controlled by the Apache Iceberg community. Polaris attempts to accurately implement this specification. Nonetheless, optional REST Catalog features may or may not be supported immediately.</description></item><item><title>Polaris Evolution</title><link>https://polaris.apache.org/releases/1.1.0/evolution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/releases/1.1.0/evolution/</guid><description>This page discusses what can be expected from Apache Polaris as the project evolves.
Using Polaris as a Catalog Polaris is primarily intended to be used as a Catalog of Tables and Views. As such, it implements the Iceberg REST Catalog API and its own REST APIs.
Revisions of the Iceberg REST Catalog API are controlled by the Apache Iceberg community. Polaris attempts to accurately implement this specification. Nonetheless, optional REST Catalog features may or may not be supported immediately.</description></item><item><title>Integrating Apache Polaris with PuppyGraph for Real-time Graph Analysis</title><link>https://polaris.apache.org/blog/2025/10/02/integrating-apache-polaris-with-puppygraph-for-real-time-graph-analysis/</link><pubDate>Thu, 02 Oct 2025 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/blog/2025/10/02/integrating-apache-polaris-with-puppygraph-for-real-time-graph-analysis/</guid><description>Unified data governance has become a hot topic over the last few years. As AI and other data-hungry use cases infiltrate the market, the need for a comprehensive data catalog solution with governance in mind has become critical. Apache Polaris has found its calling as an open-source solution, specifically built to handle data governed by Apache Iceberg, that is changing the way we manage and access data across various clouds, formats, and platforms.</description></item><item><title>Apache Polaris 1.1.0-incubating has been released!</title><link>https://polaris.apache.org/blog/2025/09/19/apache-polaris-1.1.0-incubating-has-been-released/</link><pubDate>Fri, 19 Sep 2025 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/blog/2025/09/19/apache-polaris-1.1.0-incubating-has-been-released/</guid><description>The Apache Polaris team is pleased to announce Apache Polaris 1.1.0-incubating.
This release includes:
New features &amp;amp; enchancements ** HMS support ** IMPLICIT authentication type ** Support for non-AWS S3 compatible storage with STS: MinIO, s3a scheme support ** Use of Realm instead of RealmId ** Modularized Federation Architecture ** Federated Catalog Support in Polaris CLI ** Expanded External Identity Provider support ** Python package (official) ** Documentation improvements (release process, multi-realms configuration) Bug fixes ** Fix drop view with default server configuration ** Fix MinIO support ** Remove ThreadLocal This release can be downloaded:</description></item><item><title>Doris X Polaris: Building Unified Data Lakehouse with Iceberg REST Catalog - A Practical Guide</title><link>https://polaris.apache.org/blog/2025/09/15/doris-x-polaris-building-unified-data-lakehouse-with-iceberg-rest-catalog-a-practical-guide/</link><pubDate>Mon, 15 Sep 2025 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/blog/2025/09/15/doris-x-polaris-building-unified-data-lakehouse-with-iceberg-rest-catalog-a-practical-guide/</guid><description>With the continuous evolution of data lake technologies, efficiently and securely managing massive datasets stored on object storage (such as AWS S3) while providing unified access endpoints for upstream analytics engines (like Apache Doris) has become a core challenge in modern data architectures. Apache Polaris, as an open and standardized REST Catalog service for Iceberg, provides an ideal solution to this challenge. It not only handles centralized metadata management but also significantly enhances data lake security and manageability through fine-grained access control and flexible credential management mechanisms.</description></item><item><title>Apache Polaris 1.0.1-incubating has been released!</title><link>https://polaris.apache.org/blog/2025/08/20/apache-polaris-1.0.1-incubating-has-been-released/</link><pubDate>Wed, 20 Aug 2025 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/blog/2025/08/20/apache-polaris-1.0.1-incubating-has-been-released/</guid><description>The Apache Polaris team is pleased to announce Apache Polaris 1.0.1-incubating.
This release is a maintenance release on the 1.0.1-incubating one, fixing a couple of issues on the Helm Chart:
remove db-kind in Helm Chart add relational-jdbc to Helm Chart This release can be downloaded:
https://polaris.apache.org/downloads/ The artifacts are available on Maven Central.
The Docker images are available on Docker Hub:
https://hub.docker.com/r/apache/polaris/tags https://hub.docker.com/r/apache/polaris-admin-tool/tags Enjoy !
The Apache Polaris team.</description></item><item><title/><link>https://polaris.apache.org/release-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/release-guide/</guid><description>Release Guide This guide walks you through the release process of the Apache Polaris podling.
Setup To create a release candidate, you will need:
your Apache credentials (for repository.apache.org and dist.apache.org repositories) a GPG key for signing artifacts, published in KEYS file Publish your GPG key If you haven&amp;rsquo;t published your GPG key yet, you must publish it before starting the release process:
svn checkout https://dist.apache.org/repos/dist/release/incubator/polaris polaris-dist-release cd polaris-dist-release echo &amp;#34;&amp;#34; &amp;gt;&amp;gt; KEYS # append a new line gpg --list-sigs &amp;lt;YOUR KEY ID HERE&amp;gt; &amp;gt;&amp;gt; KEYS # append signatures gpg --armor --export &amp;lt;YOUR KEY ID HERE&amp;gt; &amp;gt;&amp;gt; KEYS # append public key block svn commit -m &amp;#34;add key for &amp;lt;YOUR NAME HERE&amp;gt;&amp;#34; To send the key to the Ubuntu key-server, Apache Nexus needs it to validate published artifacts:</description></item><item><title>POLARIS VERSION INDEX MD TEMPLATE</title><link>https://polaris.apache.org/in-dev/release_index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/release_index/</guid><description>== Apache Polaris version [unreleased]
Download from &amp;hellip;</description></item></channel></rss>