<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview on Apache Polaris</title><link>https://polaris.apache.org/in-dev/unreleased/</link><description>Recent content in Overview on Apache Polaris</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://polaris.apache.org/in-dev/unreleased/index.xml" rel="self" type="application/rss+xml"/><item><title>Admin Tool</title><link>https://polaris.apache.org/in-dev/unreleased/admin-tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/admin-tool/</guid><description>Polaris includes a tool for administrators to manage the metastore.
The tool must be built with the necessary JDBC drivers to access the metastore database. For example, to build the tool with support for Postgres, run the following:
./gradlew \ :polaris-admin:assemble \ :polaris-admin:quarkusAppPartsBuild --rerun \ -Dquarkus.container-image.build=true The above command will generate:
One Fast-JAR in runtime/admin/build/quarkus-app/quarkus-run.jar Two Docker images named apache/polaris-admin-tool:latest and apache/polaris-admin-tool:&amp;lt;version&amp;gt; Usage Please make sure the admin tool and Polaris server are with the same version before using it.</description></item><item><title>Command Line Interface</title><link>https://polaris.apache.org/in-dev/unreleased/command-line-interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/command-line-interface/</guid><description>In order to help administrators quickly set up and manage their Polaris server, Polaris provides a simple command-line interface (CLI) for common tasks.
The basic syntax of the Polaris CLI is outlined below:
polaris [options] COMMAND ... options: --host --port --base-url --client-id --client-secret --access-token --realm --header --profile COMMAND must be one of the following:
catalogs principals principal-roles catalog-roles namespaces privileges profiles repair Each command supports several subcommands, and some subcommands have actions that come after the subcommand in turn.</description></item><item><title>Realm</title><link>https://polaris.apache.org/in-dev/unreleased/realm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/realm/</guid><description>This page explains what a realm is and what it is used for in Polaris.
What is it? A realm in Polaris serves as logical partitioning mechanism within the catalog system. This isolation allows for multitenancy, enabling different teams, environments or organizations to operate independently within the same Polaris deployment.
Key Characteristics Isolation: Each realm encapsulates its own set of resources, ensuring that operations, policies in one realm do not affect others.</description></item><item><title>Entities</title><link>https://polaris.apache.org/in-dev/unreleased/entities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/entities/</guid><description>This page documents various entities that can be managed in Apache Polaris (Incubating).
Catalog A catalog is a top-level entity in Polaris that may contain other entities like namespaces and tables. These map directly to Apache Iceberg catalogs.
For information on managing catalogs with the REST API or for more information on what data can be associated with a catalog, see the CreateCatalogRequest OpenAPI.
Storage Type All catalogs in Polaris are associated with a storage type.</description></item><item><title>Policy</title><link>https://polaris.apache.org/in-dev/unreleased/policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/policy/</guid><description>The Polaris Policy framework empowers organizations to centrally define, manage, and enforce fine-grained governance, lifecycle, and operational rules across all data resources in the catalog.
With the policy API, you can:
Create and manage policies Attach policies to specific resources (catalogs, namespaces, tables, or views) Check applicable policies for any given resource What is a Policy? A policy in Apache Polaris is a structured entity that defines rules governing actions on specified resources under predefined conditions.</description></item><item><title>Generic Table (Beta)</title><link>https://polaris.apache.org/in-dev/unreleased/generic-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/generic-table/</guid><description>The Generic Table in Apache Polaris is designed to provide support for non-Iceberg tables across different table formats includes delta, csv etc. It currently provides the following capabilities:
Create a generic table under a namespace Load a generic table Drop a generic table List all generic tables under a namespace NOTE The current generic table is in beta release. Please use it with caution and report any issue if encountered.</description></item><item><title>Telemetry</title><link>https://polaris.apache.org/in-dev/unreleased/telemetry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/telemetry/</guid><description>Metrics Metrics are published using Micrometer; they are available from Polaris&amp;rsquo;s management interface (port 8282 by default) under the path /q/metrics. For example, if the server is running on localhost, the metrics can be accessed via http://localhost:8282/q/metrics.
Metrics can be scraped by Prometheus or any compatible metrics scraping server. See: Prometheus for more information.
Additional tags can be added to the metrics by setting the polaris.metrics.tags.* property. Each tag is a key-value pair, where the key is the tag name and the value is the tag value.</description></item><item><title>Configuring Polaris</title><link>https://polaris.apache.org/in-dev/unreleased/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/configuration/</guid><description>Overview This page provides information on how to configure Apache Polaris (Incubating). Unless stated otherwise, this information is valid both for Polaris Docker images (and Kubernetes deployments) as well as for Polaris binary distributions.
üìù Note
For Production tips and best practices, refer to Configuring Polaris for Production. First off, Polaris server runs on Quarkus, and uses its configuration mechanisms. Read Quarkus configuration guide to get familiar with the basics.</description></item><item><title>Configuring Polaris for Production</title><link>https://polaris.apache.org/in-dev/unreleased/configuring-polaris-for-production/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/configuring-polaris-for-production/</guid><description>The default server configuration is intended for development and testing. When you deploy Polaris in production, review and apply the following checklist:
Configure OAuth2 keys Enforce realm header validation (require-header=true) Use a durable metastore (JDBC + PostgreSQL) Bootstrap valid realms in the metastore Disable local FILE storage Configure OAuth2 Polaris authentication requires specifying a token broker factory type. Two implementations are supported out of the box:
rsa-key-pair uses a pair of public and private keys; symmetric-key uses a shared secret.</description></item><item><title>Polaris Spark Client</title><link>https://polaris.apache.org/in-dev/unreleased/polaris-spark-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/polaris-spark-client/</guid><description>Apache Polaris now provides Catalog support for Generic Tables (non-Iceberg tables), please check out the Polaris Catalog OpenAPI Spec for Generic Table API specs.
Along with the Generic Table Catalog support, Polaris is also releasing a Spark client, which helps to provide an end-to-end solution for Apache Spark to manage Delta tables using Polaris.
Note the Polaris Spark client is able to handle both Iceberg and Delta tables, not just Delta.</description></item><item><title>Polaris Helm Chart</title><link>https://polaris.apache.org/in-dev/unreleased/helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/helm/</guid><description>A Helm chart for Apache Polaris (incubating).
Homepage: https://polaris.apache.org/
Source Code https://github.com/apache/polaris Installation Running locally with a Minikube cluster The below instructions assume Minikube and Helm are installed.
Start the Minikube cluster, build and load image into the Minikube cluster:
minikube start eval $(minikube docker-env) ./gradlew \ :polaris-server:assemble \ :polaris-server:quarkusAppPartsBuild --rerun \ :polaris-admin:assemble \ :polaris-admin:quarkusAppPartsBuild --rerun \ -Dquarkus.container-image.build=true Installing the chart locally The below instructions assume a local Kubernetes cluster is running and Helm is installed.</description></item><item><title>Metastores</title><link>https://polaris.apache.org/in-dev/unreleased/metastores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/metastores/</guid><description>This page explains how to configure and use Polaris metastores with either the recommended Relational JDBC or the deprecated EclipseLink persistence backends.
Relational JDBC This implementation leverages Quarkus for datasource management and supports configuration through environment variables or JVM -D flags at startup. For more information, refer to the Quarkus configuration reference.
We have 2 options for configuring the persistence backend:
1. Relational JDBC metastore with username and password using environment variables:</description></item><item><title>Polaris Evolution</title><link>https://polaris.apache.org/in-dev/unreleased/evolution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://polaris.apache.org/in-dev/unreleased/evolution/</guid><description>This page discusses what can be expected from Apache Polaris as the project evolves.
Using Polaris as a Catalog Polaris is primarily intended to be used as a Catalog of Tables and Views. As such, it implements the Iceberg REST Catalog API and its own REST APIs.
Revisions of the Iceberg REST Catalog API are controlled by the Apache Iceberg community. Polaris attempts to accurately implement this specification. Nonetheless, optional REST Catalog features may or may not be supported immediately.</description></item></channel></rss>