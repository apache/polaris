/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.polaris.tasks.api;

/** User facing task submission API. */
public interface Tasks {
  /**
   * Submit the given task request for execution.
   *
   * <p>This API only guarantees that, upon successful execution, the task request will eventually
   * be executed. When exactly and where exactly, think: system process, the task will be executed
   * depends on configuration specifics and task state.
   *
   * <p>Task executions are uniquely identified by their {@link TaskId}, which are generated by the
   * task behavior implementation. Task behavior implementations produce either new, unique task IDs
   * per submission or a deterministic task IDs based on the task parameters.
   *
   * <p>Task behavior implementations may request an initial delay of a task execution and also
   * define optional retry behaviors for successful and failed executions.
   *
   * <p>Once this function returns successfully, task execution is guaranteed to eventually happen.
   *
   * @param <PARAM> task input parameter
   * @param <RESULT> task execution result, if successful
   * @param behaviorId request to execute the task
   * @param param task parameter value, task behavior implementations derive the actual task ID
   *     based on their implementation and potentially from this task parameter value
   * @param resultType type of the result value object
   * @return asynchronous execution result
   */
  <PARAM extends TaskParameter, RESULT extends TaskResult> TaskSubmission<RESULT> submit(
      TaskBehaviorId behaviorId, PARAM param, Class<RESULT> resultType);

  // TODO add a function to retrieve a TaskSubmission by TaskId? is that useful?
}
