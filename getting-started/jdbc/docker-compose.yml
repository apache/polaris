#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

services:

  polaris:
    image: apache/polaris:postgres-latest
    depends_on:
      postgres-minio: # Polaris server depends on PostgreSQL being healthy
        condition: service_healthy
      # polaris-bootstrap-minio is a setup task; polaris server doesn't need to wait for it on every start
      # after the initial successful bootstrap. Other services that *use* Polaris data
      # (like polaris-setup-catalog-minio) should depend on polaris: service_healthy.
    ports:
      # The host port is defined by POLARIS_MINIO_API_PORT from .env, container port is 8181
      - "${POLARIS_MINIO_API_PORT:-8183}:${QUARKUS_HTTP_PORT:-8181}" # Or just - "${POLARIS_MINIO_API_PORT:-8183}:8181"
      # The host port is defined by POLARIS_MINIO_MGMT_PORT from .env, container port is 8182
      - "${POLARIS_MINIO_MGMT_PORT:-8184}:${QUARKUS_MANAGEMENT_PORT:-8182}" # Or just - "${POLARIS_MINIO_MGMT_PORT:-8184}:8182"
    environment:
      # These variables will be sourced from the .env file (or shell environment).
      # Docker Compose makes them available to the container if they are defined.
      - QUARKUS_DATASOURCE_DB_KIND
      - QUARKUS_DATASOURCE_JDBC_URL
      - QUARKUS_DATASOURCE_USERNAME
      - QUARKUS_DATASOURCE_PASSWORD

      - POLARIS_PERSISTENCE_TYPE
      - POLARIS_REALM_CONTEXT_REALMS

      # Optional JDBC retry settings
      - POLARIS_PERSISTENCE_RELATIONAL_JDBC_MAX_RETRIES
      - POLARIS_PERSISTENCE_RELATIONAL_JDBC_INITIAL_DELAY_IN_MS
      - POLARIS_PERSISTENCE_RELATIONAL_JDBC_MAX_DELAY_IN_MS

      # Other Quarkus/App settings from .env
      - QUARKUS_OTEL_SDK_DISABLED
      - QUARKUS_HTTP_PORT         # Tells Quarkus which port to bind to inside the container
      - QUARKUS_MANAGEMENT_PORT # Tells Quarkus which management port to bind to inside the container

      # Optional: Debug logging settings (will be sourced from .env if uncommented there)
      - QUARKUS_LOG_CONSOLE_LEVEL
      - QUARKUS_LOG_CATEGORY_IO_SMALLRYE_CONFIG_LEVEL
      - QUARKUS_LOG_CATEGORY_ORG_APACHE_POLARIS_LEVEL
      - QUARKUS_LOG_CATEGORY_IO_QUARKUS_DATASOURCE_LEVEL
      - QUARKUS_LOG_CATEGORY_ORG_AGROAL_LEVEL
    healthcheck:
      # Uses the management port defined by POLARIS_MINIO_MGMT_PORT (which sets QUARKUS_MANAGEMENT_PORT for inside the container)
      # The healthcheck runs INSIDE the container network, so it checks localhost:QUARKUS_MANAGEMENT_PORT (e.g. localhost:8182)
      test: ["CMD-SHELL", "curl -f http://localhost:${QUARKUS_MANAGEMENT_PORT:-8182}/q/health/live || curl -f http://localhost:${QUARKUS_MANAGEMENT_PORT:-8182}/q/health/ready || curl -f http://localhost:${QUARKUS_MANAGEMENT_PORT:-8182}/q/health"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 30s

  polaris-setup:
    image: alpine/curl
    depends_on:
      polaris:
        condition: service_healthy
    environment:
      - STORAGE_LOCATION=${STORAGE_LOCATION}
      - AWS_ROLE_ARN=${AWS_ROLE_ARN}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
    volumes:
      - ../assets/polaris/:/polaris
    entrypoint: '/bin/sh -c "chmod +x /polaris/create-catalog.sh && /polaris/create-catalog.sh"'

  spark-sql:
    image: apache/spark:3.5.5-java17-python3
    depends_on:
      polaris-setup:
        condition: service_completed_successfully
    stdin_open: true
    tty: true
    ports:
      - "4040-4045:4040-4045"
    healthcheck:
      test: "curl localhost:4040"
      interval: 5s
      retries: 15
    command: [
      /opt/spark/bin/spark-sql,
      --packages, "org.apache.iceberg:iceberg-spark-runtime-3.5_2.12:1.9.0,software.amazon.awssdk:bundle:2.28.17,software.amazon.awssdk:url-connection-client:2.28.17,org.apache.iceberg:iceberg-gcp-bundle:1.9.0,org.apache.iceberg:iceberg-azure-bundle:1.9.0",
      --conf, "spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions",
      --conf, "spark.sql.catalog.polaris=org.apache.iceberg.spark.SparkCatalog",
      --conf, "spark.sql.catalog.polaris.type=rest",
      --conf, "spark.sql.catalog.polaris.warehouse=quickstart_catalog",
      --conf, "spark.sql.catalog.polaris.uri=http://polaris:8181/api/catalog",
      --conf, "spark.sql.catalog.polaris.credential=root:s3cr3t",
      --conf, "spark.sql.catalog.polaris.scope=PRINCIPAL_ROLE:ALL",
      --conf, "spark.sql.defaultCatalog=polaris",
      --conf, "spark.sql.catalogImplementation=in-memory",
      --conf, "spark.driver.extraJavaOptions=-Divy.cache.dir=/tmp -Divy.home=/tmp"
    ]

  trino:
    image: trinodb/trino:latest
    depends_on:
      polaris-setup:
        condition: service_completed_successfully
    stdin_open: true
    tty: true
    ports:
      - "8080:8080"
    volumes:
      - ../assets/trino-config/catalog:/etc/trino/catalog
