#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

services:

  polaris:
    # IMPORTANT: the image MUST contain the Postgres JDBC driver and EclipseLink dependencies, see README for instructions
    image: apache/polaris:postgres-latest
    ports:
      # API port
      - "8181:8181"
      # Management port (metrics and health checks)
      - "8182:8182"
      # Optional, allows attaching a debugger to the Polaris JVM
      - "5005:5005"
    depends_on:
      polaris-bootstrap:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    environment:
      JAVA_DEBUG: "true"
      JAVA_DEBUG_PORT: "*:5005"
      polaris.persistence.type: eclipse-link
      polaris.persistence.eclipselink.configuration-file: /deployments/config/eclipselink/persistence.xml
      polaris.realm-context.realms: POLARIS
      quarkus.otel.sdk.disabled: "true"
    volumes:
      - ../assets/eclipselink/:/deployments/config/eclipselink
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8182/q/health"]
      interval: 2s
      timeout: 10s
      retries: 10

  polaris-bootstrap:
    # IMPORTANT: the image MUST contain the Postgres JDBC driver and EclipseLink dependencies, see README for instructions
    image: apache/polaris-admin-tool:postgres-latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      polaris.persistence.type: eclipse-link
      polaris.persistence.eclipselink.configuration-file: /deployments/config/eclipselink/persistence.xml
    volumes:
      - ../assets/eclipselink/:/deployments/config/eclipselink
    command:
      - "bootstrap"
      - "--realm=POLARIS"
      - "--credential=POLARIS,root,s3cr3t"

  polaris-setup:
    image: alpine/curl
    depends_on:
      polaris:
        condition: service_healthy
    volumes:
      - ../assets/polaris/:/polaris
    entrypoint: '/bin/sh -c "chmod +x /polaris/create-catalog.sh && /polaris/create-catalog.sh"'

  postgres:
    image: postgres:17.4
    ports:
      - "5432:5432"
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: POLARIS
      POSTGRES_INITDB_ARGS: "--encoding UTF8 --data-checksums"
    volumes:
      # Bind local conf file to a convenient location in the container
      - type: bind
        source: ./postgresql.conf
        target: /etc/postgresql/postgresql.conf
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 5s
      timeout: 2s
      retries: 15

  spark-sql:
    image: apache/spark:3.5.5-java17-python3
    depends_on:
      polaris-setup:
        condition: service_completed_successfully
    stdin_open: true
    tty: true
    ports:
      - "4040-4045:4040-4045"
    healthcheck:
      test: "curl localhost:4040"
      interval: 5s
      retries: 15
    command: [
      /opt/spark/bin/spark-sql,
      --packages, "org.apache.iceberg:iceberg-spark-runtime-3.5_2.12:1.7.0,software.amazon.awssdk:bundle:2.28.17,software.amazon.awssdk:url-connection-client:2.28.17",
      --conf, "spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions",
      --conf, "spark.sql.catalog.polaris=org.apache.iceberg.spark.SparkCatalog",
      --conf, "spark.sql.catalog.polaris.type=rest",
      --conf, "spark.sql.catalog.polaris.warehouse=polaris_demo",
      --conf, "spark.sql.catalog.polaris.uri=http://polaris:8181/api/catalog",
      --conf, "spark.sql.catalog.polaris.credential=root:s3cr3t",
      --conf, "spark.sql.catalog.polaris.scope=PRINCIPAL_ROLE:ALL",
      --conf, "spark.sql.defaultCatalog=polaris",
      --conf, "spark.sql.catalogImplementation=in-memory",
      --conf, "spark.driver.extraJavaOptions=-Divy.cache.dir=/tmp -Divy.home=/tmp"
    ]
